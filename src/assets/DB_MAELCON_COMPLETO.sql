/*ESTRUCTURA DE USUARIOS, ROLES Y PERMISOS*/

/*ESTRUCTURA DE PUESTO*/
CREATE TABLE TBL_MP_PUESTO (
  ID_PUESTO INT(11) PRIMARY KEY  AUTO_INCREMENT           COMMENT ''
  ,PUESTO VARCHAR(50) NOT NULL UNIQUE					  COMMENT ''
  ,DESCRIPCION_PUESTO VARCHAR(80) NOT NULL                COMMENT ''
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE PERSONA*/
CREATE TABLE TBL_PERSONAS (
 ID_PERSONA          	INT(11)  PRIMARY KEY AUTO_INCREMENT     COMMENT ''
  ,ID_PUESTO         	INT(11) NOT NULL                        COMMENT ''
  ,NOMBRE_PERSONA    	VARCHAR(50) NOT NULL                    COMMENT ''
  ,APELLIDO_PERSONA  	VARCHAR(50) NOT NULL                    COMMENT ''
  ,GENERO     		 	VARCHAR(20) NOT NULL                    COMMENT ''
  ,RTN               	VARCHAR(14) NOT NULL UNIQUE             COMMENT ''
  ,TELEFONO 			VARCHAR(10)						   		COMMENT ''
  ,FEC_REGIS_PERSONA 	DATETIME NOT NULL                       COMMENT ''
  ,ESTADO     			BOOLEAN NOT NULL                        COMMENT ''
  ,SUELDO     			DECIMAL(10,2) NOT NULL                  COMMENT 'EL SUELDO ES DEL PUESTO O PERSONA'
  ,FOREIGN KEY`FK_PER_PUESTO`(`ID_PUESTO` )REFERENCES `TBL_MP_PUESTO`(`ID_PUESTO` )
  ,CHECK(SUELDO >= 0)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE TABLA ROLES*/
CREATE TABLE TBL_MS_ROLES(
  ID_ROL               INT(11) PRIMARY KEY AUTO_INCREMENT   COMMENT 'ID DEL ROL QUE DESEMPEÑA EL USUARIO'
  ,ROL                 VARCHAR(100) NOT NULL UNIQUE         COMMENT 'ROL QUE DESEMPEÑA EL USUARIO'
  ,DESCRIPCION         VARCHAR(100) NOT NULL                COMMENT 'DESCRIPCION DEL USUARIO'
  ,FECHA_CREACION      DATETIME NOT NULL                    COMMENT ' FECHA DE CREACION DEL USUARIO'
  ,CREADO_POR          INT(11) NOT NULL                     COMMENT 'QUIEN CREO EL ROL'
  ,FECHA_MODIFICACION  DATETIME NOT NULL                    COMMENT 'FECHA QUE SE MODIFICO EL ROL DEL USUARIO'
  ,MODIFICADO_POR      INT(11) NOT NULL                     COMMENT 'QUIEN MODIFICO EL ROL'
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE TABLA USUARIO*/
CREATE TABLE TBL_MS_USUARIO(
  ID_USUARIO              INT(11) PRIMARY KEY AUTO_INCREMENT     COMMENT 'ID DEL USUARIO '
  ,ID_ROL                 INT(11) NOT NULL                       COMMENT 'ID DEL ROL QUE DESEMPEÑA EL USUARIO'
  ,ID_PERSONA       	  INT(11) NOT NULL                       COMMENT ''
  ,USUARIO                VARCHAR(15) NOT NULL UNIQUE            COMMENT 'DESCRIBIR EL USUARIO'
  ,CONTRASENA             VARCHAR(100) NOT NULL                  COMMENT 'CONTRASEÑA DEL USUARIO'
  ,IMG_USUARIO			  TEXT NOT NULL					 COMMENT ''
  ,CORREO_ELECTRONICO     VARCHAR(50) NOT NULL UNIQUE            COMMENT 'CORREO ELECTRONICO DEL USUARIO'
  ,FECHA_ULTIMA_CONEXION  DATETIME NOT NULL                      COMMENT 'FECHA EN QUE EL USUARIO SE CONECTO POR ULTIMA VEZ'
  ,FECHA_CREACION         DATETIME NOT NULL                      COMMENT ' FECHA DE CREACION DEL USUARIO'
  ,CREADO_POR             INT(11) NOT NULL                   	 COMMENT 'QUIEN CREO EL USUARIO'
  ,FECHA_MODIFICACION     DATETIME NOT NULL                      COMMENT 'FECHA QUE SE MODIFICO EL  USUARIO'
  ,MODIFICADO_POR         INT(11) NOT NULL                   	 COMMENT 'QUIEN MODIFICO EL USUARIO'
  ,PRIMER_INGRESO         VARCHAR(100) NOT NULL                  COMMENT 'DESCRIBIR EL PRIMER INGRESO DEL USUARIO'
  ,FECHA_VENCIMIENTO      DATETIME NOT NULL                      COMMENT 'DESCRIBIR LA FECHA DE VENCIMIENTO PARA QUE EL USUARIO CAMBIE DE CONTRASEÑA SEGUN LO ESTABLECIDO EN PARAMETRO'
  ,ESTADO                 BOOLEAN  NOT NULL                    	 COMMENT 'ESTADO 0 INACTIVO, 1 ACTIVO'
  ,FOREIGN KEY`FK_PER_USUARIO`(`ID_PERSONA`)REFERENCES `TBL_PERSONAS`(`ID_PERSONA` )
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

ALTER TABLE `TBL_MS_USUARIO` ADD CONSTRAINT FOREIGN KEY `FK_CREADOR_ID_USUARIO` (`CREADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`);
ALTER TABLE `TBL_MS_USUARIO` ADD CONSTRAINT FOREIGN KEY `FK_MODIFICADOR_USUARIO` (`MODIFICADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`);
ALTER TABLE `TBL_MS_ROLES` ADD CONSTRAINT FOREIGN KEY `FK_CREADOR_ROL` (`CREADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`);
ALTER TABLE `TBL_MS_ROLES` ADD CONSTRAINT FOREIGN KEY `FK_MODIFICADOR_ROL` (`MODIFICADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`);

INSERT INTO TBL_MP_PUESTO(PUESTO, DESCRIPCION_PUESTO) VALUES ('Super Administrador', 'Administrador de sistemas');
INSERT INTO TBL_MP_PUESTO(PUESTO, DESCRIPCION_PUESTO) VALUES ('DEFAULT', 'Sin puesto');

INSERT INTO TBL_PERSONAS(ID_PUESTO, NOMBRE_PERSONA, APELLIDO_PERSONA, GENERO, RTN, TELEFONO, FEC_REGIS_PERSONA, ESTADO, SUELDO)
VALUES(1, 'Alejandro', 'Gomez', 'MASCULINO', '08011991245784', '9999-0000', NOW(), 1, 0.00);


INSERT INTO TBL_MS_USUARIO(ID_ROL, ID_PERSONA, USUARIO, CONTRASENA, IMG_USUARIO, CORREO_ELECTRONICO, FECHA_ULTIMA_CONEXION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR, PRIMER_INGRESO, FECHA_VENCIMIENTO, ESTADO)
VALUES(1, 1, 'alex12', '1234', '', 'alex@gmail.com', NOW(), NOW(), 1, NOW(), 1, 'PRIMER INGRESO', '2022-12-12', 1);

INSERT INTO TBL_MS_ROLES(ROL, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUES('SuperAdmin', 'Usuario por defecto del sistema', NOW(), 1, NOW(), 1);
INSERT INTO TBL_MS_ROLES(ROL, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUES('DEFAULT', 'Sin permisos', NOW(), 1, NOW(), 1);

ALTER TABLE `TBL_MS_USUARIO` ADD CONSTRAINT FOREIGN KEY `FK_ROL_USUARIO` (`ID_ROL`) REFERENCES `TBL_MS_ROLES` (`ID_ROL`);

/*ESTRUCTURA DE TABLA OBJETO*/
CREATE TABLE TBL_OBJETOS(
  ID_OBJETO               INT(11) PRIMARY KEY  AUTO_INCREMENT  COMMENT 'ID DEL OBJETO DEL USUARIO '
  ,OBJETOS                VARCHAR(100) NOT NULL UNIQUE         COMMENT 'DESCRIPCION  DEL OBJETO'
  ,TIPO_OBJETO            VARCHAR(15) NOT NULL                 COMMENT 'DESCRIPCION  DEL TIPO OBJETO'
  ,DESCRIPCION            VARCHAR(100) NOT NULL                COMMENT 'DESCRIBIR SI ES UNA INSERCION;ACTUALIZACION;ELIMINACION;NUEVO'
  ,FECHA_CREACION         DATETIME NOT NULL                    COMMENT ' FECHA DE CREACION DEL OBJETO'
  ,CREADO_POR             INT(11) NOT NULL                     COMMENT 'QUIEN CREO EL OBJETO'
  ,FECHA_MODIFICACION     DATETIME NOT NULL                    COMMENT 'FECHA QUE SE MODIFICO EL  OBJETO'
  ,MODIFICADO_POR         INT(11) NOT NULL                     COMMENT 'QUIEN MODIFICO EL OBJETO'
  ,FOREIGN KEY `FK_CREADOR_OBJETO` (`CREADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
  ,FOREIGN KEY `FK_MODIFICADOR_OBJETO` (`MODIFICADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

INSERT INTO TBL_OBJETOS(OBJETOS, TIPO_OBJETO, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUES('DEFAULT', 'PRUEBA', 'DEFAULT', NOW(), 1, NOW(), 1);

/*ESTRUCTURA DE TABLA PERMISO*/
CREATE TABLE TBL_PERMISO(
  ID_ROL                  INT(11)  NOT NULL              COMMENT 'ID DEL ROL QUE DESEMPEÑA EL USUARIO'
  ,ID_OBJETO              INT(11) NOT NULL               COMMENT 'ID DEL OBJETO DEL USUARIO '
  ,PERMISO_INSERCION      BOOLEAN NOT NULL               COMMENT 'DESCRIBIR EL PERMISO QUE DESEA '
  ,PERMISO_ELIMINACION    BOOLEAN NOT NULL               COMMENT 'DESCRIBIR EL PERMISO QUE DESEA '
  ,PERMISO_ACTUALIZACION  BOOLEAN NOT NULL               COMMENT 'DESCRIBIR EL PERMISO QUE DESEA '
  ,PERMISO_CONSULTAR      BOOLEAN NOT NULL               COMMENT 'DESCRIBIR EL PERMISO QUE DESEA '
  ,FECHA_CREACION         DATETIME NOT NULL              COMMENT 'FECHA DE CREACION DEL PERMISO'
  ,CREADO_POR             INT(11) NOT NULL               COMMENT 'QUIEN CREO EL PERMISO'
  ,FECHA_MODIFICACION     DATETIME NOT NULL              COMMENT 'FECHA QUE SE MODIFICO EL  PERMISO'
  ,MODIFICADO_POR         INT(11) NOT NULL               COMMENT 'QUIEN MODIFICO EL PERMISO'
  ,FOREIGN KEY `FK_PERM_ROLES`(`ID_ROL`) REFERENCES `TBL_MS_ROLES`(`ID_ROL`)
  ,FOREIGN KEY `FK_PERM_OBJETOS`(`ID_OBJETO`) REFERENCES `TBL_OBJETOS`(`ID_OBJETO`)
  ,PRIMARY KEY (`ID_ROL`,`ID_OBJETO`)
  ,FOREIGN KEY `FK_CREADOR_PERMISO` (`CREADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
  ,FOREIGN KEY `FK_MODIFICADOR_PERMISO` (`MODIFICADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE HISTORIAL DE CONTRASEÑA*/
CREATE TABLE TBL_MS_HIST_CONTRASENA (
  ID_HISTORIAL   INT(11) PRIMARY KEY  AUTO_INCREMENT  COMMENT ''
  ,ID_USUARIO    INT(11) NOT NULL                     COMMENT ''
  ,CONTRASENA    VARCHAR(100) NOT NULL                COMMENT ''
  ,FOREIGN KEY`FK_HIST_CONTRA_USUARIO`(`ID_USUARIO`)REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE TABLA PREGUNTAS_USUARIO*/
CREATE TABLE TBL_MS_PREGUNTAS_USUARIO(
  ID_PREGUNTAS_USR         INT(11) PRIMARY KEY AUTO_INCREMENT    COMMENT 'ID DE LA PREGUNTA DEL USUARIO EN EL SISTEMA'
  ,ID_USUARIO              INT(11) NOT NULL                      COMMENT 'ID DEL USUARIO '
  ,PREGUNTA                VARCHAR(100) NOT NULL                 COMMENT 'PREGUNTAS DEL USUARIO'
  ,RESPUESTA               VARCHAR(100) NOT NULL                 COMMENT 'DESCRIPCION DE LA RESPUESTA DE LAS PREGUNTAS DELUSUARIO '
  ,FECHA_CREACION          DATETIME NOT NULL                     COMMENT ' FECHA DE CREACION DE LA PREGUNTA '
  ,CREADO_POR              INT(11) NOT NULL                      COMMENT 'QUIEN CREO LAS PREGUNTAS'
  ,FECHA_MODIFICACION      DATETIME NOT NULL                     COMMENT 'FECHA QUE SE MODIFICO LA PREGUNTA'
  ,MODIFICADO_POR          INT(11) NOT NULL                   	 COMMENT 'QUIEN MODIFICO LAS PREGUNTAS'
  ,FOREIGN KEY`FK_PREG_USUARIO`(`ID_USUARIO` )REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)ON DELETE CASCADE
  ,FOREIGN KEY `FK_CREADOR_MS_PREGUNTAS` (`CREADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
  ,FOREIGN KEY `FK_MODIFICADOR_MS_PREGUNTAS` (`MODIFICADO_POR`) REFERENCES `TBL_MS_USUARIO` (`ID_USUARIO`)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

INSERT INTO TBL_MS_PREGUNTAS_USUARIO(ID_USUARIO, PREGUNTA, RESPUESTA, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUE(1, 'Codigo secreto de seguridad', '11021', now(), 1, now(), 1);

/*ESTRUCTURA DE TABLA CLIENTE*/
CREATE TABLE TBL_CLIENTES(
  ID_CLIENTE          INT(11) PRIMARY KEY AUTO_INCREMENT    COMMENT 'ID DEL CLIENTE'
   ,NOMBRE_CLIENTE    VARCHAR(100) NOT NULL                 COMMENT 'NOMBRE DEL CLIENTE PARA REGISTRAR EN EL SISTEMA'
   ,RTN               VARCHAR(16) NOT NULL UNIQUE           COMMENT 'OBTENER EL RTN DEL CLIENTE'
   ,DIRECCION_CLIENTE VARCHAR(100) NOT NULL                 COMMENT 'DESCRIBIR DIRECCION COMPLETA DEL CLIENTE'
   ,TELEFONO_CLIENTE  VARCHAR(9) NOT NULL                   COMMENT 'OBTENER TELEFONO DEL CLIENTE'
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;


/*---------------------------------------------------*/
/*ESTRUCTURA DE PRODUCTOS HE INVENTARIOS*/

/*CATEGORIAS DE PRODUCTOS*/
CREATE TABLE TBL_CATEGORIAS (
  ID_CATEGORIA 		INT(10) PRIMARY KEY AUTO_INCREMENT		COMMENT ''
  ,CATEGORIA 		VARCHAR(50) NOT NULL UNIQUE				COMMENT ''
  ,DESCRIPCION 		VARCHAR(100) NOT NULL					COMMENT ''
) ENGINE=InnoDB 
DEFAULT CHARSET=UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE PROVEEDORES*/
CREATE TABLE TBL_PROVEEDORES (
  ID_PROVEEDOR 			INT(11) PRIMARY KEY  AUTO_INCREMENT 	COMMENT ''
  ,RTN           		VARCHAR(16) NOT NULL UNIQUE          	COMMENT ''
  ,NOMBRE_PROVEEDOR 	VARCHAR(80) NOT NULL              		COMMENT ''
  ,TELEFONO_PROVEEDOR 	VARCHAR(15) NOT NULL               		COMMENT ''
  ,CORREO_PROVEEDOR 	VARCHAR(50) NOT NULL
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE PRODUCTO*/
CREATE TABLE TBL_PRODUCTOS(
  ID_PRODUCTO         		INT(11) PRIMARY KEY AUTO_INCREMENT 	COMMENT ''
  ,ID_PROVEEDOR    			INT(11) NOT NULL                    COMMENT ''
  ,NOMBRE_PRODUCTO   		VARCHAR(80) NOT NULL                COMMENT ''
  ,MARCA_PRODUCTO    		VARCHAR(80) NOT NULL                COMMENT ''
  ,DESCRIPCION_PRODUCTO     VARCHAR(200) NOT NULL               COMMENT 'MODELO, TAMAÑO, COLOR, ETC...'
  ,ID_CATEGORIA   			INT(11) NOT NULL                    COMMENT ''
  ,ESTADO                	BOOLEAN NOT NULL                    COMMENT ''
  ,IMG_PRODUCTO          	TEXT NOT NULL
  ,FOREIGN KEY`FK_PROD_PROVEEDORES`(`ID_PROVEEDOR` )REFERENCES `TBL_PROVEEDORES`(`ID_PROVEEDOR`) ON DELETE CASCADE
  ,FOREIGN KEY`FK_PROD_CATEGORIAS`(`ID_CATEGORIA` )REFERENCES `TBL_CATEGORIAS`(`ID_CATEGORIA`)
  ,UNIQUE(ID_PROVEEDOR, NOMBRE_PRODUCTO, MARCA_PRODUCTO)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE INVENTARIO*/
CREATE TABLE TBL_INVENTARIO (
  ID_INVENTARIO 		INT(11) PRIMARY KEY  AUTO_INCREMENT 	COMMENT ''
  ,ID_PRODUCTO 			INT(11) NOT NULL                  		COMMENT ''
  ,EXISTENCIA 			DECIMAL(10,2) NOT NULL                  COMMENT ''
  ,PRECIO_VENTA 		DECIMAL(10,2) NOT NULL                  COMMENT ''
  ,PRECIO_UNITARIO     	DECIMAL(10,2) NOT NULL                  COMMENT ''
  ,METODO				BOOLEAN NOT NULL                   		COMMENT ' 0 ES UNA COMPRA, 1 REPRESENTA UNA VENTA'
  ,ESTADO               BOOLEAN NOT NULL                     	COMMENT ''
  ,FOREIGN KEY`FK_INVENPROD`(`ID_PRODUCTO`)REFERENCES `TBL_PRODUCTOS`(`ID_PRODUCTO`)ON DELETE CASCADE
  ,CHECK(EXISTENCIA >= 0 AND PRECIO_VENTA >= 0 AND PRECIO_UNITARIO >= 0)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE KARDEX*/
CREATE TABLE TBL_KARDEX (
  ID_KARDEX 				INT(11) PRIMARY KEY  AUTO_INCREMENT          COMMENT ''
  ,ID_INVENTARIO 			INT(11) NOT NULL                             COMMENT ''
  ,FECHA_VENCI_PRODUCTO 	DATETIME                       				 COMMENT 'EN CASO DE QUE CADUQUE'
  ,CANTIDAD 				DECIMAL(10,2) NOT NULL                       COMMENT ''
  ,PRECIO_UNITARIO     		DECIMAL(10,2) NOT NULL                       COMMENT ''
  ,TOTAL					DECIMAL(10,2) NOT NULL
  ,TIPO_MOVIMIENTO 			BOOLEAN NOT NULL                             COMMENT ''
  ,FECHA_MOVIMIENTO 		DATETIME NOT NULL                            COMMENT ''
  ,FOREIGN KEY `FK_KAR_INVENTARIO`(`ID_INVENTARIO`)REFERENCES `TBL_INVENTARIO`(`ID_INVENTARIO`)
  ,CHECK(CANTIDAD >= 0 AND PRECIO_UNITARIO >= 0 AND TOTAL >=0)
  )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE METODO DE PAGO*/
CREATE TABLE TBL_METODOS_PAGO (
  ID_PAGO 			INT(11) PRIMARY KEY AUTO_INCREMENT  COMMENT ''
  ,FORMA_PAGO 		VARCHAR(80) NOT NULL UNIQUE        	COMMENT ''
  ,DESCRIPCION 		VARCHAR(80) NOT NULL            	COMMENT ''
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE COMPRAS*/
CREATE TABLE TBL_COMPRAS (
  ID_COMPRA 			INT(11) PRIMARY KEY AUTO_INCREMENT 	COMMENT ''
  ,ID_USUARIO 			INT(11) NOT NULL                    COMMENT ''
  ,ID_PAGO 				INT(11) NOT NULL                    COMMENT ''
  ,ID_PROVEEDOR 		INT(11) NOT NULL                    COMMENT ''
  ,OBSERVACION_COMPRA 	VARCHAR(300)                        COMMENT ''
  ,FECHA_COMPRA 		DATETIME NOT NULL                   COMMENT ''
  ,TOTAL_COMPRA 		DECIMAL(10,2) NOT NULL              COMMENT ''
  ,ISV_COMPRA 			DECIMAL(10,2) NOT NULL              COMMENT ''
  ,ESTADO 				BOOLEAN NOT NULL					COMMENT ''
  ,FOREIGN KEY`FK_COM_USUARIO`(`ID_USUARIO`)REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)
  ,FOREIGN KEY`FK_COM_PAGO`(`ID_PAGO`)REFERENCES `TBL_METODOS_PAGO`(`ID_PAGO`)
  ,FOREIGN KEY`FK_COM_PROVEEDORES`(`ID_PROVEEDOR`)REFERENCES `TBL_PROVEEDORES`(`ID_PROVEEDOR`)
  ,CHECK(TOTAL_COMPRA >= 0 AND ISV_COMPRA >= 0)
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE  DETALLE DE COMPRAS*/
CREATE TABLE TBL_DETALLES_COMPRA (
  ID_DETALLE_COMPRA 	INT(11) PRIMARY KEY  AUTO_INCREMENT      COMMENT ''
  ,ID_PRODUCTO 			INT(11) NOT NULL                         COMMENT ''
  ,ID_COMPRA 			INT(11) NOT NULL                         COMMENT ''
  ,DESCRIP_COMPRA 		VARCHAR(300) NOT NULL                    COMMENT ''
  ,PRECIO_UNITARIO 		DECIMAL(10,2) NOT NULL                   COMMENT ''
  ,CANTIDAD_PRODUCTO 	DECIMAL(10,2) NOT NULL                   COMMENT ''
  ,SUB_TOTAL 			DECIMAL(10,2) NOT NULL                   COMMENT ''
  ,FOREIGN KEY`FK_DETA_PRODUCTOS`(`ID_PRODUCTO`)REFERENCES `TBL_PRODUCTOS`(`ID_PRODUCTO`)ON DELETE CASCADE
  ,FOREIGN KEY`FK_DETA_COMPRAS`(`ID_COMPRA`)REFERENCES `TBL_COMPRAS`(`ID_COMPRA`) ON DELETE CASCADE
  ,UNIQUE(ID_COMPRA, ID_PRODUCTO)
  ,CHECK(CANTIDAD_PRODUCTO > 0 AND SUB_TOTAL >= 0 AND PRECIO_UNITARIO >= 0)
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE TABLA VENTA*/
CREATE TABLE TBL_VENTAS(
  ID_VENTA             INT(11) PRIMARY KEY AUTO_INCREMENT          COMMENT 'ID DE LAS VENTAS'
   ,ID_PAGO            INT(11) NOT NULL                            COMMENT 'ID DEL PAGO DE LA VENTA'
   ,ID_USUARIO         INT(11) NOT NULL                            COMMENT 'ID DEL USUARIO'
   ,CANTIDAD_VENTA     INT(11) NOT NULL                            COMMENT 'DESCRIPCION DE LA CANTIDAD DE VENTAS (considerar la necesidad de este campo)'
   ,FECHA_VENTA        DATETIME NOT NULL                           COMMENT 'FECHA REALIZADA LA VENTA'
   ,ID_CLIENTE         INT(11) NOT NULL                            COMMENT 'ID DEL CLIENTE'
   ,ISV                DECIMAL(10,2) NOT NULL                      COMMENT 'DESCRIPCION DEL IMPUESTO'
   ,TOTAL_VENTA        DECIMAL(10,2) NOT NULL                      COMMENT 'DESCRIPCION DEL TOTAL DE LA VENTA'
   ,DESCRIPCION_VENTA  VARCHAR(200) NOT NULL               		   COMMENT 'DESCRIBIR  LOS ARTICULOS DE LA VENTA REALIZADA U OBSERVACIONES'
   ,ESTADO 			   BOOLEAN NOT NULL 						   COMMENT 'IDENTIFICA SI UNA VENTA YA FUE FINALIZADA'
   ,COMISION_EMPLEADO  DECIMAL(10,2) NOT NULL					   COMMENT 'COMISION DEL EMPLEADO EN BASE A LA VENTA'
   ,FOREIGN KEY `FK_VENTA_PAGO`(`ID_PAGO`)REFERENCES `TBL_METODOS_PAGO`(`ID_PAGO`)
   ,FOREIGN KEY `FK_VENTA_USUARIO`(`ID_USUARIO`)REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)
   ,FOREIGN KEY `FK_VENTA_CLIENTE`(`ID_CLIENTE`)REFERENCES `TBL_CLIENTES`(`ID_CLIENTE`)
   ,CHECK(CANTIDAD_VENTA >= 0 AND TOTAL_VENTA >= 0 AND ISV >= 0 AND COMISION_EMPLEADO >= 0)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE TABLA DETALLE VENTA*/
CREATE TABLE TBL_DETALLES_VENTA(
ID_DETALLE_VENTA        INT(11) PRIMARY KEY  AUTO_INCREMENT 	COMMENT 'ID DEL DETALLE DE LA VENTA'
 ,ID_PRODUCTO           INT(11) NOT NULL                    	COMMENT 'ID DEL PRODUCTO'
 ,ID_VENTA              INT(11) NOT NULL                    	COMMENT 'ID DE LA VENTA'
 ,MONTO_UNITARIO        DECIMAL(10,2) NOT NULL              	COMMENT 'DESCRIBIR EL PRECIO UNITARIO DE CADA ARTICULO'
 ,CANTIDAD_PRODUCTO     DECIMAL(10,2) NOT NULL              	COMMENT 'DESCRIBIR CANTIDAD DEL PRODUCTO VENDIDO'
 ,SUB_TOTAL             DECIMAL(10,2) NOT NULL              	COMMENT 'SUB TOTAL SIN IMPUESTO DE LA VENTA'
 ,TOTAL                 DECIMAL(10,2) NOT NULL              	COMMENT 'TOTAL MAS IMPUESTO DE LA VENTA'
 ,FOREIGN KEY `FK_DETA_PRODUCTO`(`ID_PRODUCTO`) REFERENCES `TBL_PRODUCTOS`(`ID_PRODUCTO`)
 ,FOREIGN KEY `FK_DETA_VENTA`(`ID_VENTA`) REFERENCES `TBL_VENTAS`(`ID_VENTA`)
 ,UNIQUE(ID_VENTA, ID_PRODUCTO)
 ,CHECK(SUB_TOTAL >= 0 AND TOTAL >= 0 AND CANTIDAD_PRODUCTO >= 0 AND MONTO_UNITARIO >= 0)
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;


/****************************************************************************/
/*ESTRUCTURAS DE HISTORIAL Y CONTROL*/

/*ESTRUCTURA DE BITACORA*/
CREATE TABLE TBL_MS_BITACORA(
  ID_BITACORA 			INT(11) PRIMARY KEY AUTO_INCREMENT 	COMMENT ''
  ,ID_USUARIO 			INT(11) NOT NULL                    COMMENT ''
  ,ID_OBJETO 			INT(11) NOT NULL                    COMMENT ''
  ,ACCION 				VARCHAR(50) NOT NULL                COMMENT ''
  ,DESCRIPCION 			TEXT NOT NULL                      	COMMENT ''
  ,INFORMACION_ANTERIOR TEXT 							    COMMENT ''
  ,INFORMACION_ACTUAL 	TEXT 							    COMMENT ''
  ,FECHA_BITACORA 		DATETIME NOT NULL               	COMMENT ''
  ,FOREIGN KEY `FK_BITA_USUA`(`ID_USUARIO`) REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)
  ,FOREIGN KEY `FK_BITA_OBJE`(`ID_OBJETO`) REFERENCES `TBL_OBJETOS`(`ID_OBJETO`)
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

CREATE TABLE TBL_INFORMACION(
	ID_INFO 			INT(11) PRIMARY KEY AUTO_INCREMENT
    ,TITULO				VARCHAR(50) NOT NULL
    ,TIPO				VARCHAR(50) NOT NULL
	,ENLACE 			TEXT NOT NULL
    ,FECHA_CREACION		DATETIME NOT NULL
    ,ESTADO				BOOLEAN NOT NULL
)ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

/*ESTRUCTURA DE PARAMETRO*/
CREATE TABLE TBL_MS_PARAMETROS(
  ID_PARAMETRO          INT(11)  PRIMARY KEY  AUTO_INCREMENT  COMMENT ''
  ,PARAMETRO            VARCHAR(50) NOT NULL UNIQUE           COMMENT ''
  ,ID_USUARIO           INT(11) NOT NULL                      COMMENT ''
  ,VALOR                VARCHAR(100) NOT NULL                 COMMENT ''
  ,FECHA_CREACION       DATETIME NOT NULL                     COMMENT ''
  ,FECHA_MODIFICACION   DATETIME NOT NULL                     COMMENT ''
  ,FOREIGN KEY`FK_PARA_USUARIO`(`ID_USUARIO`)REFERENCES `TBL_MS_USUARIO`(`ID_USUARIO`)ON DELETE CASCADE
 )ENGINE=INNODB
CHARACTER SET UTF8
COLLATE UTF8_UNICODE_CI;

INSERT INTO TBL_MS_PARAMETROS(PARAMETRO, ID_USUARIO, VALOR, FECHA_CREACION, FECHA_MODIFICACION)
VALUES	('Impuesto sobre venta (ISV)', 1, '15', NOW(), NOW()),
		('Comisión por venta', 1, '5', NOW(), NOW()),
		('Intentos de sesión', 1, '3', NOW(), NOW()),
        ('Intentos de recuperación de contraseña', 1, '5', NOW(), NOW()),
        ('Tiempo de duración de usuarios', 1, '60', NOW(), NOW()),
        ('hostDB', 1, 'localhost', NOW(), NOW()),
        ('userDB', 1, 'root', NOW(), NOW()),
        ('databaseDB', 1, 'db_maelcon_5', NOW(), NOW()),
        ('passwordDB', 1, 'rodriguez1999', NOW(), NOW()),
        ('host_mail', 1, 'smtp.gmail.com', NOW(), NOW()),
        ('user_mail', 1, 'maelconservices', NOW(), NOW()),
        ('pass_mail', 1, 'hbxnssxpesbwxkbr', NOW(), NOW()),
        ('service_mail', 1, 'gmail', NOW(), NOW()),
        ('port_mail', 1, '465', NOW(), NOW()),
        ('bool_port_mail', 1, 'true', NOW(), NOW()),
        ('name_cloudinary', 1, 'maelcon', NOW(), NOW()),
        ('api_key_cloudinary', 1, '588467179963663', NOW(), NOW()),
        ('api_secret_cloudinary', 1, 'RcaTIK2zxmc77S_WzwAP067GYcM', NOW(), NOW());
        
        
/*ACTIVAR O DESACTIVAR USUARIOS*/
DELIMITER $$
CREATE PROCEDURE ESTADO_USUARIO(
	_ID_USUARIO INT(11),
    _ESTADO BOOLEAN,
    _MODIFICADO_POR INT(11),
    INOUT MENSAJE VARCHAR(100),
    INOUT CODIGO INT
)
BEGIN
	DECLARE FECHA_ACT DATETIME DEFAULT NOW();
	IF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _MODIFICADO_POR AND ESTADO = 1) = 1 THEN
        UPDATE TBL_MS_USUARIO SET ESTADO = _ESTADO, MODIFICADO_POR = _MODIFICADO_POR, FECHA_MODIFICACION = FECHA_ACT
        WHERE ID_USUARIO = _ID_USUARIO;
        SET MENSAJE = 'Usuario actualizado exitosamente.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CREAR ROLES*/
DELIMITER $$
CREATE PROCEDURE CREAR_MS_ROL(
	_ROL VARCHAR(100),
	_DESCRIPCION VARCHAR(100),
    _CREADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_ROLES WHERE ROL = _ROL) > 0 THEN
		SET MENSAJE = 'Rol no creado, nombre de rol existente.';
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_MS_ROLES(ROL, DESCRIPCION, CREADO_POR, FECHA_CREACION, MODIFICADO_POR, FECHA_MODIFICACION)
        VALUES (_ROL, _DESCRIPCION, _CREADO_POR, NOW(), _CREADO_POR, NOW());
        SET MENSAJE = 'Rol registrado en el sistema exitosamente.';
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ACTUALIZAR ROLES*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_MS_ROL(
	_ID_ROL INT(11),
	_ROL VARCHAR(100),
	_DESCRIPCION VARCHAR(100),
    _MODIFICADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_ROLES WHERE ROL = _ROL AND ID_ROL != _ID_ROL) > 0 THEN
		SET MENSAJE = 'Rol no creado, nombre de rol existente.';
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_MS_ROLES SET ROL = _ROL, DESCRIPCION = _DESCRIPCION, MODIFICADO_POR = _MODIFICADO_POR, FECHA_MODIFICACION = NOW()
        WHERE ID_ROL = _ID_ROL;
        SET MENSAJE = 'Rol actualizado exitosamente.';
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CREAR OBJETOS*/
DELIMITER $$
CREATE PROCEDURE CREAR_OBJETOS(
	_OBJETO VARCHAR(100),
    _TIPO_OBJETO VARCHAR(15),
    _DESCRIPCION VARCHAR(100),
    _CREADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _CREADO_POR AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Este evento debe ser atribuido a un usuario registrado y activo";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_OBJETOS WHERE OBJETOS = _OBJETO) > 0 THEN
		SET MENSAJE = "Objeto no creado, el nombre de objeto ya existe.";
        SET CODIGO = 0;
	ELSE 
		INSERT INTO TBL_OBJETOS(OBJETOS, TIPO_OBJETO, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
        VALUES(_OBJETO, _TIPO_OBJETO, _DESCRIPCION, NOW(), _CREADO_POR, NOW(), CREADO_POR);
        SET MENSAJE = "Objeto creado exitosamente.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*MODIFICAR OBJETOS*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_OBJETOS(
	_ID_OBJETO INT(11),
	_OBJETO VARCHAR(100),
    _TIPO_OBJETO VARCHAR(15),
    _DESCRIPCION VARCHAR(100),
    _MODIFICADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _MODIFICADO_POR AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Este evento debe ser atribuido a un usuario registrado y activo";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_OBJETOS WHERE OBJETOS = _OBJETO AND ID_OBJETO != _ID_OBJETO) > 0 THEN
		SET MENSAJE = "Objeto no modificado, el nombre de objeto ya existe.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_OBJETOS SET OBJETOS= _OBJETO, TIPO_OBJETO = _TIPO_OBJETO, DESCRIPCION = _DESCRIPCION,
        FECHA_MODIFICACION = NOW(), MODIFICADO_POR = CREADO_POR WHERE ID_OBJETO = _ID_OBJETO;
        SET MENSAJE = "Objeto modificado exitosamente.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*CREAR PERMISOS*/
DELIMITER $$
CREATE PROCEDURE CREAR_PERMISOS(
	_ID_OBJETO INT(11),
    _ID_ROL INT(11),
    _INSERTAR BOOLEAN,
    _ELIMINAR BOOLEAN,
    _ACTUALIZAR BOOLEAN,
    _CONSULTAR BOOLEAN,
    _CREADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_OBJETOS WHERE ID_OBJETO = _ID_OBJETO) = 0 THEN
		SET MENSAJE = "El objeto referenciado no existe";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_MS_ROLES WHERE ID_ROL = _ID_ROL) = 0 THEN
		SET MENSAJE = "El rol referenciado no existe.";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_PERMISO WHERE ID_ROL = _ID_ROL AND ID_OBJETO = _ID_OBJETO) > 0 THEN
		SET MENSAJE = "Ya existen permisos para este rol en el objeto especificado.";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _CREADO_POR AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "El usuario creador no existe o esta inactivo.";
        SET CODIGO = 0;
    ELSE
		INSERT INTO TBL_PERMISO(ID_ROL, ID_OBJETO, PERMISO_INSERCION, PERMISO_ELIMINACION, PERMISO_ACTUALIZACION, PERMISO_CONSULTAR, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
        VALUES (_ID_ROL, _ID_OBJETO, _INSERTAR, _ELIMINAR, _ACTUALIZAR, _CONSULTAR, NOW(), _CREADO_POR, NOW(), _CREADO_POR);
        SET MENSAJE = "Permisos asignados de forma exitosa.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ACTUALIZAR PERMISOS*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_PERMISOS(
	_ID_OBJETO INT(11),
    _ID_ROL INT(11),
    _INSERTAR BOOLEAN,
    _ELIMINAR BOOLEAN,
    _ACTUALIZAR BOOLEAN,
    _CONSULTAR BOOLEAN,
    _MODIFICADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_PERMISO WHERE ID_ROL = _ID_ROL AND ID_OBJETO = _ID_OBJETO) = 0 THEN
		SET MENSAJE = "La relación rol-objeto que deceas modificar no existe.";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _MODIFICADO_POR AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "El usuario modificador no existe o esta inactivo.";
        SET CODIGO = 0;
    ELSE
		UPDATE TBL_PERMISO SET ID_ROL = _ID_ROL, ID_OBJETO = _ID_OBJETO, PERMISO_INSERCION = _INSERTAR,
        PERMISO_ELIMINACION = _ELIMINAR, PERMISO_ACTUALIZACION = _ACTUALIZAR, PERMISO_CONSULTAR = _CONSULTAR, FECHA_MODIFICACION = NOW(), 
        MODIFICADO_POR = _MODIFICADO_POR WHERE ID_ROL = _ID_ROL AND ID_OBJETO = _ID_OBJETO;
        SET MENSAJE = "Permisos actualizados de forma exitosa.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*METODOS DE PAGO */ /*modulo administracion*/
DELIMITER $$
CREATE PROCEDURE CREAR_METODO_PAGO(
	_FORMA_PAGO VARCHAR(80),
	_DESCRIPCION VARCHAR(80),
	OUT MENSAJE VARCHAR(100),
	OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_METODOS_PAGO WHERE FORMA_PAGO = _FORMA_PAGO) > 0 THEN
        SET MENSAJE = "Forma de pago existente.";
        SET CODIGO = 0;
	ELSE 
		INSERT INTO TBL_METODOS_PAGO(FORMA_PAGO, DESCRIPCION)
        VALUES(_FORMA_PAGO, _DESCRIPCION);
        SET MENSAJE = "Forma de pago registrada exitosamente.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*MODIFICAR METODOS DE PAGO*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_METODO_PAGO(
	_ID_PAGO INT(11),
	_FORMA_PAGO VARCHAR(80),
	_DESCRIPCION VARCHAR(80),
	OUT MENSAJE VARCHAR(100),
	OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_METODOS_PAGO WHERE ID_PAGO != _ID_PAGO AND FORMA_PAGO = _FORMA_PAGO) > 0 THEN
        SET MENSAJE = "Forma de pago existente.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_METODOS_PAGO SET FORMA_PAGO = _FORMA_PAGO, DESCRIPCION = _DESCRIPCION
        WHERE ID_PAGO = _ID_PAGO;
        SET MENSAJE = "Forma de pago actualizada exitosamente.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CONTROL DE PARAMETROS*/
DELIMITER $$
CREATE PROCEDURE CREAR_MS_PARAMETRO(
	_PARAMETRO VARCHAR(50),
    _ID_USUARIO INT(11),
    _VALOR VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Para realizar modificaciones debes estar registrado y activo.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_PARAMETROS WHERE PARAMETRO = _PARAMETRO) THEN
		SET MENSAJE = "El nombre de parametro brindado ya existe.";
        SET CODIGO = 0;
	ELSE 
		INSERT INTO TBL_MS_PARAMETROS (PARAMETRO, ID_USUARIO, VALOR, FECHA_CREACION, FECHA_MODIFICACION)
        VALUES(_PARAMETRO, _ID_USUARIO, _VALOR, NOW(), NOW());
        
        SET MENSAJE = "Parametro creado de forma exitosa.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ACTUALIZACION DE LOS PARAMETROS*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_MS_PARAMETRO(
	_ID_PARAMETRO INT(11),
    _ID_USUARIO INT(11),
    _VALOR VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Para realizar modificaciones debes estar registrado y activo.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_MS_PARAMETROS SET ID_USUARIO = _ID_USUARIO, VALOR = _VALOR, FECHA_MODIFICACION = NOW()
        WHERE ID_PARAMETRO = _ID_PARAMETRO;
        
        SET MENSAJE = "Parametro actualizado de forma exitosa.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*inicio de sesion*/
DELIMITER $$
CREATE PROCEDURE COMPROBAR_USUARIO(_CORREO VARCHAR(50), OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE CORREO_ELECTRONICO = _CORREO) = 0 THEN
		SET MENSAJE = 'No existe un usuario con el correo electronico brindado';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE CORREO_ELECTRONICO = _CORREO AND ESTADO = 0) = 1 THEN
		SET MENSAJE = 'El usuario esta inactivo.';
		SET CODIGO = 0;
	ELSE 
		SELECT ID_USUARIO, CONTRASENA, CORREO_ELECTRONICO FROM TBL_MS_USUARIO WHERE CORREO_ELECTRONICO = _CORREO;
        SET MENSAJE = 'Usuario encontrado.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*servicios modulo ayuda*/
DELIMITER $$
CREATE PROCEDURE CREAR_INFROMACION_AYUDA(
	_TITULO VARCHAR(50),
	_TIPO VARCHAR(50), 
    _ENLACE TEXT, 
    OUT MENSAJE VARCHAR(100), 
    OUT CODIGO INT)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_INFORMACION WHERE TITULO = _TITULO OR ENLACE = _ENLACE ) THEN 
		SET MENSAJE = 'El titulo o enlace ya se encuentran en otro registro';
		SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_INFORMACION(TITULO, TIPO, ENLACE, FECHA_CREACION, ESTADO)
        VALUES(_TITULO, _TIPO, _ENLACE, NOW(), 0);
        SET MENSAJE = 'Sección de información agregada';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_INFROMACION_AYUDA(
	_ID_INFO INT(11),
	_TITULO VARCHAR(50),
    _ENLACE TEXT, 
    _ESTADO BOOLEAN,
    OUT MENSAJE VARCHAR(100), 
    OUT CODIGO INT)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_INFORMACION WHERE ID_INFO != _ID_INFO AND (TITULO = _TITULO OR ENLACE = _ENLACE) ) THEN 
		SET MENSAJE = 'El titulo o enlace ya se encuentran en otro registro';
		SET CODIGO = 0;
	ELSE
		UPDATE TBL_INFORMACION SET TITULO = _TITULO, ENLACE = _ENLACE, ESTADO = _ESTADO
        WHERE ID_INFO = _ID_INFO;
        SET MENSAJE = 'Sección de información actualizada.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE ELIMINAR_INFROMACION_AYUDA(
	_ID_INFO INT(11),
    OUT MENSAJE VARCHAR(100), 
    OUT CODIGO INT)
BEGIN
	DELETE FROM TBL_INFORMACION WHERE ID_INFO = _ID_INFO;
	SET MENSAJE = 'Sección de información eliminada.';
	SET CODIGO = 1;
END$$
DELIMITER ;

/*CREAR PUESTO*/
DELIMITER $$
CREATE PROCEDURE CREAR_MP_PUESTO(
	_PUESTO VARCHAR(50),
	_DESCRIPCION VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MP_PUESTO WHERE PUESTO = _PUESTO) > 0 THEN
		SET MENSAJE = 'Puesto no creado, nombre de puesto existente.';
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_MP_PUESTO(PUESTO, DESCRIPCION_PUESTO)
        VALUES (_PUESTO, _DESCRIPCION);
        SET MENSAJE = 'Puesto registrado en el sistema exitosamente.';
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ACTUALIZAR PUESTO*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_MP_PUESTO(
	_ID_PUESTO INT(11),
	_PUESTO VARCHAR(50),
	_DESCRIPCION VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MP_PUESTO WHERE PUESTO = _PUESTO AND ID_PUESTO != _ID_PUESTO) > 0 THEN
		SET MENSAJE = 'Puesto no creado, nombre de puesto existente.';
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_MP_PUESTO SET PUESTO = _PUESTO, DESCRIPCION_PUESTO = _DESCRIPCION
        WHERE ID_PUESTO = _ID_PUESTO;
        SET MENSAJE = 'Puesto registrado en el sistema exitosamente.';
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PERMISOS_RUTA(_ID_USUARIO VARCHAR(50), _ID_OBJETO VARCHAR(50),
                                       _ID_CRUD VARCHAR(50),OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
		SET MENSAJE = 'No existe un usuario que deseas consultar';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO AND ESTADO = 0) = 1 THEN
		SET MENSAJE = 'El usuario esta inactivo.';
		SET CODIGO = 0;
    ELSEIF (_ID_CRUD = 1) THEN
    	SELECT PERMISO_INSERCION FROM TBL_PERMISO
		WHERE ID_ROL = (SELECT ID_ROL FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) AND 
		ID_OBJETO = (SELECT ID_OBJETO FROM tbl_objetos WHERE ID_OBJETO = _ID_OBJETO); 
        SET MENSAJE = 'Permiso retornados.';
		SET CODIGO = 1;
    ELSEIF (_ID_CRUD = 2) THEN
    	SELECT PERMISO_ELIMINACION FROM TBL_PERMISO
		WHERE ID_ROL = (SELECT ID_ROL FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) AND 
		ID_OBJETO = (SELECT ID_OBJETO FROM tbl_objetos WHERE ID_OBJETO = _ID_OBJETO); 
        SET MENSAJE = 'Permiso retornados.';
		SET CODIGO = 1;
    ELSEIF (_ID_CRUD = 3) THEN
    	SELECT PERMISO_ACTUALIZACION FROM TBL_PERMISO
		WHERE ID_ROL = (SELECT ID_ROL FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) AND 
		ID_OBJETO = (SELECT ID_OBJETO FROM tbl_objetos WHERE ID_OBJETO = _ID_OBJETO); 
        SET MENSAJE = 'Permiso retornados.';
		SET CODIGO = 1;
    ELSEIF (_ID_CRUD = 4) THEN
    	SELECT PERMISO_CONSULTAR FROM TBL_PERMISO
		WHERE ID_ROL = (SELECT ID_ROL FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) AND 
		ID_OBJETO = (SELECT ID_OBJETO FROM tbl_objetos WHERE ID_OBJETO = _ID_OBJETO); 
        SET MENSAJE = 'Permiso retornados.';
		SET CODIGO = 1;
	ELSE 
        SET MENSAJE = 'No existe el permiso solicitado';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PERMISOS_ROL( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_ROLES) = 0 THEN
        SET MENSAJE = 'No existen roles dentro de la base de datos';
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PERMISO) = 0 THEN
        SET MENSAJE = 'No existen permisos dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT O.OBJETOS, P.PERMISO_INSERCION, P.PERMISO_ELIMINACION, P.PERMISO_ACTUALIZACION, P.PERMISO_CONSULTAR, R.ROL, R.ID_ROL FROM TBL_PERMISO P 
        INNER JOIN TBL_MS_ROLES R ON P.ID_ROL = R.ID_ROL
        INNER JOIN TBL_OBJETOS O ON P.ID_OBJETO = O.ID_OBJETO;
		SET MENSAJE = 'Lista de usuarios retornada exitosamente';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*GESTIONES DE PROVEEDORES*/  /*modulo compras*/
DELIMITER $$
CREATE PROCEDURE CREAR_PROVEEDOR(
	_RTN VARCHAR(16),
    _NOMBRE VARCHAR(80),
    _TELEFONO VARCHAR(15),
    _CORREO VARCHAR(50),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE RTN = _RTN) > 0 THEN
		SET MENSAJE = "Ya existe un proveedor con el RTN brindado.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE CORREO_PROVEEDOR = _CORREO OR TELEFONO_PROVEEDOR = _TELEFONO) > 0 THEN
		SET MENSAJE = "Uno o ambos métodos de contacto con el proveedor son utilizados por alguien más.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_PROVEEDORES (RTN, NOMBRE_PROVEEDOR, CORREO_PROVEEDOR, TELEFONO_PROVEEDOR)
        VALUES (_RTN, _NOMBRE, _CORREO, _TELEFONO);
        SET MENSAJE = "Proveedor registrado exitosamente.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*MODIFICAR PROVEEDOR*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_PROVEEDOR(
	_ID_PROVEEDOR INT(11),
	_RTN VARCHAR(15),
    _NOMBRE VARCHAR(16),
    _TELEFONO VARCHAR(15),
    _CORREO VARCHAR(50),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = _ID_PROVEEDOR) = 0 THEN
		SET MENSAJE = "El proveedor que decea modificar no existe.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE RTN !=_RTN AND (CORREO_PROVEEDOR = _CORREO OR TELEFONO_PROVEEDOR = _TELEFONO)) > 0 THEN
		SET MENSAJE = "Uno o ambos métodos de contacto con el proveedor son utilizados por alguien más.";
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_PROVEEDORES SET NOMBRE_PROVEEDOR = _NOMBRE, CORREO_PROVEEDOR = _CORREO, TELEFONO_PROVEEDOR = _TELEFONO 
        WHERE ID_PROVEEDOR = _ID_PROVEEDOR;
        SET MENSAJE = "Proveedor actualizado exitosamente.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CONTROLES DE COMPRA*/ /*modulo compra*/
/*Crear encabezado*/
DELIMITER $$
CREATE PROCEDURE ENCABEZADO_COMPRA(
	_ID_USUARIO INT(11),
    _ID_PROVEEDOR INT(11),
    _ID_PAGO INT(11),
    _OBSERVACION VARCHAR(300),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT,
    OUT ID INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Usuario ineccistente o inactivo";
        SET CODIGO = 0;
        SET ID = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = _ID_PROVEEDOR) = 0 THEN
		SET MENSAJE = "El proveedor referenciado no existe";
        SET CODIGO = 0;
        SET ID = 0;
	ELSE
		INSERT INTO TBL_COMPRAS(ID_USUARIO, ID_PAGO, ID_PROVEEDOR, OBSERVACION_COMPRA, FECHA_COMPRA, TOTAL_COMPRA, ISV_COMPRA, ESTADO)
		VALUES(_ID_USUARIO, _ID_PROVEEDOR, _ID_PAGO, _OBSERVACION, NOW(), 0.00, 0.00, 0);
        
        SET MENSAJE = "Compra registrada";
        SET CODIGO = 1;
        SELECT MAX(ID_COMPRA) INTO ID FROM TBL_COMPRAS;
	END IF;
END$$
DELIMITER ;

/*Modificar encabezado*/ /*modulo compra*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_ENCABEZADO_COMPRA(
	_ID_COMPRA INT(11),
    _ID_PAGO INT(11),
    _OBSERVACION VARCHAR(300),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0) = 1 THEN
		UPDATE TBL_COMPRAS SET ID_PAGO = _ID_PAGO, OBSERVACION_COMPRA = _OBSERVACION, FECHA_COMPRA = NOW()
        WHERE ID_COMPRA = _ID_COMPRA;
        SET MENSAJE = "Información modificada";
        SET CODIGO = 1;
	ELSEIF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 1) = 1 THEN
		SET MENSAJE = "La compra ha sido finalizada, no se puede modificar.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA) = 0 THEN
		SET MENSAJE = "La compra que desea modificar no existe.";
        SET CODIGO = 0;
	END IF;
END$$
DELIMITER ;

/*Agregar productos a compra*/
DELIMITER $$
CREATE PROCEDURE AGREGAR_PRODUCTO_COMPRA(
	_ID_PRODUCTO INT(11),
    _ID_COMPRA INT(11),
    _PRECIO_UNITARIO DECIMAL(10,2),
    _DESCRIPCION VARCHAR(300),
    _CANTIDAD DECIMAL(10,2),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Compra ineccistente o finalizada";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PRODUCTOS WHERE ID_PRODUCTO = _ID_PRODUCTO AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Producto ineccistente o inactivo";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_DETALLES_COMPRA WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_COMPRA = _ID_COMPRA) > 0 THEN
		SET MENSAJE = "Producto ya existe en los detalles de esta compra.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_DETALLES_COMPRA(ID_PRODUCTO, ID_COMPRA, PRECIO_UNITARIO, DESCRIP_COMPRA, CANTIDAD_PRODUCTO, SUB_TOTAL)
        VALUES(_ID_PRODUCTO, _ID_COMPRA, _PRECIO_UNITARIO, _DESCRIPCION, _CANTIDAD, (_PRECIO_UNITARIO * _CANTIDAD));
        
        UPDATE TBL_COMPRAS SET TOTAL_COMPRA = TOTAL_COMPRA + (_PRECIO_UNITARIO * _CANTIDAD), ISV_COMPRA = ISV_COMPRA + ((_PRECIO_UNITARIO * _CANTIDAD)*_ISV)
        WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0;
        
		SET MENSAJE = "Producto agregado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ACTUALIZAR productos a compra*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_PRODUCTO_COMPRA(
	_ID_PRODUCTO INT(11),
    _ID_COMPRA INT(11),
    _PRECIO_UNITARIO DECIMAL(10,2),
    _DESCRIPCION VARCHAR(300),
    _CANTIDAD INT,
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _TOTAL_temp DECIMAL(10,2);
    DECLARE _ISV_temp DECIMAL(10,2);
	DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Compra ineccistente o finalizada";
        SET CODIGO = 0;
	ELSE
		SELECT (PRECIO_UNITARIO * CANTIDAD_PRODUCTO), (PRECIO_UNITARIO * CANTIDAD_PRODUCTO * _ISV) INTO _TOTAL_temp, _ISV_temp FROM TBL_DETALLES_COMPRA
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_COMPRA = _ID_COMPRA;
        
		UPDATE TBL_DETALLES_COMPRA SET PRECIO_UNITARIO = _PRECIO_UNITARIO, DESCRIP_COMPRA = _DESCRIPCION, CANTIDAD_PRODUCTO = _CANTIDAD,  SUB_TOTAL = (_PRECIO_UNITARIO * _CANTIDAD)
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_COMPRA = _ID_COMPRA;
        
        UPDATE TBL_COMPRAS SET  TOTAL_COMPRA = TOTAL_COMPRA + (_PRECIO_UNITARIO * _CANTIDAD) - _TOTAL_temp
        , ISV_COMPRA = ISV_COMPRA + ((_PRECIO_UNITARIO * _CANTIDAD)*_ISV) - _ISV_temp
        WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0;
        
		SET MENSAJE = "Producto actualizado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ELIMINAR EL PRODUCTO DE UNA COMPRA*/
DELIMITER $$
CREATE PROCEDURE ELIMINAR_PRODUCTO_COMPRA(
	_ID_PRODUCTO INT(11),
    _ID_COMPRA INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _PRECIO DECIMAL(10,2);
    DECLARE _CANTIDAD DECIMAL(10,2);
	DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Compra ineccistente o finalizada";
        SET CODIGO = 0;
	ELSE
		SELECT PRECIO_UNITARIO, CANTIDAD_PRODUCTO INTO _PRECIO, _CANTIDAD FROM TBL_DETALLES_COMPRA
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_COMPRA = _ID_COMPRA;
        
		DELETE FROM TBL_DETALLES_COMPRA WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_COMPRA = _ID_COMPRA;
        
        UPDATE TBL_COMPRAS SET TOTAL_COMPRA = TOTAL_COMPRA - (_PRECIO * _CANTIDAD), ISV_COMPRA = ISV_COMPRA - ((_PRECIO * _CANTIDAD)*_ISV)
        WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0;
        
		SET MENSAJE = "Producto eliminado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*FINALIZAR UNA COMPRA*/
DELIMITER $$
CREATE PROCEDURE PROCESAR_COMPRA(
	_ID_COMPRA INT(11),
    _ID_USUARIO INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "La compra no esta registrada o ya ha sido finalizada.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_DETALLES_COMPRA WHERE ID_COMPRA = _ID_COMPRA) = 0 THEN
		SET MENSAJE = "La compra no cuenta con productos, no puede ser procesada.";
        SET CODIGO = 0;
	ELSE
        
        INSERT INTO TBL_KARDEX (ID_INVENTARIO, FECHA_VENCI_PRODUCTO, CANTIDAD, PRECIO_UNITARIO, TOTAL, TIPO_MOVIMIENTO, FECHA_MOVIMIENTO)
			SELECT I.ID_INVENTARIO, NULL, D.CANTIDAD_PRODUCTO, D.PRECIO_UNITARIO, (D.CANTIDAD_PRODUCTO *  D.PRECIO_UNITARIO), 0, NOW() 
			FROM TBL_DETALLES_COMPRA D INNER JOIN TBL_INVENTARIO I ON D.ID_PRODUCTO = I.ID_PRODUCTO
			WHERE D.ID_COMPRA = _ID_COMPRA;
            
		SET SQL_SAFE_UPDATES = 0;
        UPDATE TBL_INVENTARIO I JOIN TBL_DETALLES_COMPRA D ON I.ID_PRODUCTO = D.ID_PRODUCTO
			SET I.PRECIO_UNITARIO = ((I.EXISTENCIA * I.PRECIO_UNITARIO) + (D.PRECIO_UNITARIO * D.CANTIDAD_PRODUCTO))/(I.EXISTENCIA + D.CANTIDAD_PRODUCTO),
			I.EXISTENCIA = I.EXISTENCIA + D.CANTIDAD_PRODUCTO WHERE D.ID_COMPRA = _ID_COMPRA;
		SET SQL_SAFE_UPDATES = 1;
        
        UPDATE TBL_COMPRAS SET ID_USUARIO = _ID_USUARIO, ESTADO = 1, FECHA_COMPRA = NOW()
        WHERE ID_COMPRA = _ID_COMPRA;
        
        SET MENSAJE = "Compra registrada con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ELIMINAR UNA COMPRA*/
DELIMITER $$
CREATE PROCEDURE ELIMINAR_COMPRA(
	_ID_COMPRA INT(11),
    _ID_USUARIO INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA AND ESTADO = 1) = 1 THEN
		SET MENSAJE = "La compra fue finalizada, no puede ser eliminada.";
        SET CODIGO = 0;
	ELSE
        DELETE FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA;
        SET MENSAJE = "Compra eliminada con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CONTROL DE PRODUCTOS*/ /*modulo inventario*/
DELIMITER $$
CREATE PROCEDURE CREAR_CATEGORIA(
	_CATEGORIA VARCHAR(50),
    _DESCRIPCION VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_CATEGORIAS WHERE CATEGORIA = _CATEGORIA) > 0 THEN
		SET MENSAJE = "El nombre de la categoria ya existe.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_CATEGORIAS (CATEGORIA, DESCRIPCION)
        VALUES(_CATEGORIA, _DESCRIPCION);
		SET MENSAJE = "Categoria creada.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*MODIFICAR CATEGORIA*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_CATEGORIA(
	_ID_CATEGORIA INT(11),
	_CATEGORIA VARCHAR(50),
    _DESCRIPCION VARCHAR(100),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_CATEGORIAS WHERE ID_CATEGORIA = _ID_CATEGORIA) = 0 THEN
		SET MENSAJE = "La categoria referenciada no existe.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_CATEGORIAS WHERE CATEGORIA = _CATEGORIA) > 0 THEN
		SET MENSAJE = "El nombre de la categoria ya existe.";
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_CATEGORIAS SET CATEGORIA = _CATEGORIA, DESCRIPCION = _DESCRIPCION
        WHERE ID_CATEGORIA = _ID_CATEGORIA;
		SET MENSAJE = "Categoria modificada.";
        SET CODIGO = 1;
    END IF;
END $$
DELIMITER ;

/*GESTION DE PRODUCTOS*/ /*modulo inventario*/
DELIMITER $$
CREATE PROCEDURE CREAR_PRODUCTO(
	_ID_PROVEEDOR INT(11),
    _NOMBRE VARCHAR(80),
    _MARCA VARCHAR(80),
    _DESCRIPCION VARCHAR(200),
    _IMG TEXT,
    _ESTADO BOOLEAN,
    _ID_CATEGORIA INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_PRODUCTOS WHERE ID_PROVEEDOR = _ID_PROVEEDOR AND NOMBRE_PRODUCTO = _NOMBRE AND MARCA_PRODUCTO = _MARCA) > 0 THEN
		SET MENSAJE = "Este producto ya se encuentra registrado.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_PRODUCTOS (ID_PROVEEDOR, NOMBRE_PRODUCTO, MARCA_PRODUCTO, DESCRIPCION_PRODUCTO, ID_CATEGORIA, ESTADO, IMG_PRODUCTO)
        VALUES( _ID_PROVEEDOR, _NOMBRE, _MARCA, _DESCRIPCION, _ID_CATEGORIA, _ESTADO, _IMG);
        SELECT MAX(ID_PRODUCTO) INTO CODIGO FROM TBL_PRODUCTOS;
        
        INSERT INTO TBL_INVENTARIO(ID_PRODUCTO, EXISTENCIA, PRECIO_VENTA, PRECIO_UNITARIO, METODO, ESTADO)
        VALUES(CODIGO, 0.00, 0.00, 0.00, 0, 0);
        SET MENSAJE = "Producto registrado con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*MODIFICAR PRODUCTO*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_PRODUCTO(
	_ID_PRODUCTO INT(11),
	_ID_PROVEEDOR INT(11),
    _NOMBRE VARCHAR(80),
    _MARCA VARCHAR(80),
    _DESCRIPCION VARCHAR(200),
    _IMG TEXT,
    _ESTADO BOOLEAN,
    _ID_CATEGORIA INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_PRODUCTOS WHERE ID_PRODUCTO != _ID_PRODUCTO AND (ID_PROVEEDOR = _ID_PROVEEDOR AND NOMBRE_PRODUCTO = _NOMBRE AND MARCA_PRODUCTO = _MARCA)) > 0 THEN
		SET MENSAJE = "Las caracteristicas coinciden con otro registro.";
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_PRODUCTOS SET ID_PROVEEDOR = _ID_PROVEEDOR, NOMBRE_PRODUCTO = _NOMBRE, MARCA_PRODUCTO = _MARCA, 
        DESCRIPCION_PRODUCTO =  _DESCRIPCION, ID_CATEGORIA = _ID_CATEGORIA, ESTADO = _ESTADO, IMG_PRODUCTO = _IMG
        WHERE ID_PRODUCTO = _ID_PRODUCTO;
        
        SET MENSAJE = "Producto actualizado con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*PROCESOS DE INVENTARIO*/ /*modulo inventario*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_INVENTARIO(
	_ID_INVENTARIO INT(11),
    _PRECIO_VENTA DECIMAL(10,2),
    _ESTADO BOOLEAN,
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_INVENTARIO WHERE ID_INVENTARIO = _ID_INVENTARIO) = 0 THEN
		SET MENSAJE = "El sección del inventario referenciado no exite";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_INVENTARIO SET PRECIO_VENTA = _PRECIO_VENTA, ESTADO = _ESTADO
        WHERE ID_INVENTARIO = _ID_INVENTARIO;
        SET MENSAJE = "Sección del inventario actualizada.";
        SET CODIGO = 1;
    END IF;
END $$
DELIMITER ;

/*ACTUALIZAR FECHA DE VENCIMIENTO DE UN PRODUCTO*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_KARDEX(
	_ID_KARDEX INT(11),
	_FECHA_VENCIMIENTO DATETIME,
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_KARDEX WHERE ID_KARDEX = _ID_KARDEX) = 0 THEN
		SET MENSAJE = "La sección kardex referenciada no existe.";
        SET CODIGO = 0;
	ELSE
        UPDATE TBL_KARDEX SET FECHA_VENCI_PRODUCTO = _FECHA_VENCIMIENTO
        WHERE ID_KARDEX = _ID_KARDEX;  
        SET MENSAJE = "Fecha de vencimiento actualizada.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PRODUCTOS_FULL( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PRODUCTOS) = 0 THEN
        SET MENSAJE = 'No existen productos dentro de la base de datos';
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PROVEEDORES) = 0 THEN
        SET MENSAJE = 'No existen proveedores dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT P.ID_PRODUCTO, P.NOMBRE_PRODUCTO, P.MARCA_PRODUCTO, 
        P.DESCRIPCION_PRODUCTO, I.EXISTENCIA, I.PRECIO_VENTA, I.PRECIO_UNITARIO, C.CATEGORIA, PE.NOMBRE_PROVEEDOR FROM TBL_PRODUCTOS P 
        INNER JOIN TBL_PROVEEDORES PE ON P.ID_PROVEEDOR = PE.ID_PROVEEDOR
        INNER JOIN TBL_INVENTARIO I ON P.ID_PRODUCTO = I.ID_PRODUCTO
        INNER JOIN TBL_CATEGORIAS C ON P.ID_CATEGORIA = C.ID_CATEGORIA;
		SET MENSAJE = 'Lista de productos con detalles retornados retornada exitosamente';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PRODUCTOS_FULL_ID(_ID_PRODUCTO INT , OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PRODUCTOS) = 0 THEN
        SET MENSAJE = 'No existen productos dentro de la base de datos';
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PROVEEDORES) = 0 THEN
        SET MENSAJE = 'No existen proveedores dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT P.ID_PRODUCTO, P.NOMBRE_PRODUCTO, P.MARCA_PRODUCTO, 
        P.DESCRIPCION_PRODUCTO, I.EXISTENCIA, I.PRECIO_VENTA, I.PRECIO_UNITARIO, C.CATEGORIA, PE.NOMBRE_PROVEEDOR FROM TBL_PRODUCTOS P 
        INNER JOIN TBL_PROVEEDORES PE ON P.ID_PROVEEDOR = PE.ID_PROVEEDOR
        INNER JOIN TBL_INVENTARIO I ON P.ID_PRODUCTO = I.ID_PRODUCTO
        INNER JOIN TBL_CATEGORIAS C ON P.ID_CATEGORIA = C.ID_CATEGORIA WHERE P.ID_PRODUCTO=_ID_PRODUCTO;
		SET MENSAJE = 'Lista de productos con detalles retornados retornada exitosamente';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*LISTA DE USUARIOS ACTIVOS*/
DELIMITER $$
CREATE PROCEDURE USUARIOS_ACTIVOS()
BEGIN
	SELECT * FROM TBL_MS_USUARIO WHERE ESTADO = 1;
END$$
DELIMITER ;

/*Crear usuario*/
DELIMITER $$
CREATE PROCEDURE CREAR_MS_USUARIO(
	_ID_PUESTO INT(11),
    _NOMBRE VARCHAR(50),
    _APELLIDO VARCHAR(50),
    _GENERO VARCHAR(50),
    _RTN VARCHAR(14),
    _TELEFONO VARCHAR(10),
    _SUELDO DECIMAL(10,2),
    _ID_ROL INT(11),
    _USUARIO VARCHAR(15),
    _CONTRASENA VARCHAR(100),
    _IMG_USUARIO TEXT,
    _CORREO_ELECTRONICO VARCHAR(50),
    _CREADO_POR INT(11),
    _FECHA_VENCIMIENTO DATETIME,
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE FECHA_ACT DATETIME;
SELECT NOW() INTO FECHA_ACT;
	IF (SELECT COUNT(*) FROM TBL_PERSONAS WHERE RTN = _RTN) > 0 THEN
		SET MENSAJE = 'La persona con el RTN brindado ya esta registrada.';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE CORREO_ELECTRONICO = _CORREO_ELECTRONICO) > 0 THEN
		SET MENSAJE = 'El correo brindado esta registrado en otra cuenta.';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE USUARIO = _USUARIO) > 0 THEN
		SET MENSAJE = 'El usuario brindado esta registrado en otra cuenta.';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _CREADO_POR AND ESTADO = 1) = 1 THEN
		INSERT INTO TBL_PERSONAS(ID_PUESTO, NOMBRE_PERSONA, APELLIDO_PERSONA, GENERO, RTN, TELEFONO, FEC_REGIS_PERSONA, ESTADO, SUELDO)
        VALUES(_ID_PUESTO, _NOMBRE, _APELLIDO, _GENERO, _RTN, _TELEFONO, FECHA_ACT, 1, _SUELDO);

		SELECT MAX(ID_PERSONA) INTO CODIGO FROM TBL_PERSONAS;
        INSERT INTO TBL_MS_USUARIO(ID_ROL, ID_PERSONA, USUARIO, CONTRASENA, IMG_USUARIO, CORREO_ELECTRONICO, FECHA_ULTIMA_CONEXION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR, PRIMER_INGRESO, FECHA_VENCIMIENTO, ESTADO)
        VALUES(_ID_ROL, CODIGO, _USUARIO, _CONTRASENA, _IMG_USUARIO, _CORREO_ELECTRONICO, FECHA_ACT, FECHA_ACT, _CREADO_POR, FECHA_ACT, _CREADO_POR, FECHA_ACT, _FECHA_VENCIMIENTO, 0);
        
        SELECT MAX(ID_USUARIO) INTO CODIGO FROM TBL_MS_USUARIO;
        INSERT INTO TBL_MS_HIST_CONTRASENA(ID_USUARIO, CONTRASENA)
        VALUES (CODIGO, _CONTRASENA);

		SET MENSAJE = 'Usuario creado exitosamente.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*registrar usuario DESDE EL LOGIN*/
DELIMITER $$
CREATE PROCEDURE REGISTRAR_MS_USUARIO(
    _NOMBRE VARCHAR(50),
    _APELLIDO VARCHAR(50),
    _GENERO VARCHAR(50),
    _RTN VARCHAR(14),
    _TELEFONO VARCHAR(10),
    _USUARIO VARCHAR(15),
    _CONTRASENA VARCHAR(100),
    _IMG_USUARIO TEXT,
    _CORREO_ELECTRONICO VARCHAR(50),
    _PREGUNTA VARCHAR(80),
    _RESPUESTA VARCHAR(80),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_PERSONAS WHERE RTN = _RTN) > 0 THEN
		SET MENSAJE = 'La persona con el RTN brindado ya esta registrada.';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE CORREO_ELECTRONICO = _CORREO_ELECTRONICO) > 0 THEN
		SET MENSAJE = 'El correo brindado esta registrado en otra cuenta.';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE USUARIO = _USUARIO) > 0 THEN
		SET MENSAJE = 'El usuario brindado esta registrado en otra cuenta.';
		SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_PERSONAS(ID_PUESTO, NOMBRE_PERSONA, APELLIDO_PERSONA, GENERO, RTN, TELEFONO, FEC_REGIS_PERSONA, ESTADO, SUELDO)
        VALUES(2, _NOMBRE, _APELLIDO, _GENERO, _RTN, _TELEFONO, NOW(), 1, 0.00);

		SELECT MAX(ID_PERSONA) INTO CODIGO FROM TBL_PERSONAS;
        INSERT INTO TBL_MS_USUARIO(ID_ROL, ID_PERSONA, USUARIO, CONTRASENA, IMG_USUARIO, CORREO_ELECTRONICO, FECHA_ULTIMA_CONEXION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR, PRIMER_INGRESO, FECHA_VENCIMIENTO, ESTADO)
        VALUES(2, CODIGO, _USUARIO, _CONTRASENA, _IMG_USUARIO, _CORREO_ELECTRONICO, NOW(), NOW(), 1, NOW(), 1, NOW(), NOW(), 0);
        
        SELECT MAX(ID_USUARIO) INTO CODIGO FROM TBL_MS_USUARIO;
        INSERT INTO TBL_MS_HIST_CONTRASENA(ID_USUARIO, CONTRASENA)
        VALUES (CODIGO, _CONTRASENA);
        
        INSERT INTO TBL_MS_PREGUNTAS_USUARIO(ID_USUARIO, PREGUNTA, RESPUESTA, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
        VALUES(CODIGO, _PREGUNTA, _RESPUESTA, NOW(), CODIGO, NOW(), CODIGO);

		SET MENSAJE = 'Usuario creado exitosamente.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;


/*ACTUALIZAR usuario*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_MS_USUARIO(
	_ID_USUARIO INT(11),
    _NOMBRE VARCHAR(50),
    _APELLIDO VARCHAR(50),
	_ID_PUESTO INT(11),
    _TELEFONO VARCHAR(10),
    _SUELDO DECIMAL(10,2),
    _ID_ROL INT(11),
    _IMG_USUARIO TEXT,
    _MODIFICADO_POR INT(11),
    INOUT MENSAJE VARCHAR(100),
    INOUT CODIGO INT
)
BEGIN
	DECLARE FECHA_ACT DATETIME DEFAULT NOW();
    DECLARE _ID_PERSONA INT;
    SELECT ID_PERSONA INTO _ID_PERSONA FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO;
    
	IF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _MODIFICADO_POR AND ESTADO = 1) = 1 THEN
		UPDATE TBL_PERSONAS SET NOMBRE_PERSONA = _NOMBRE, 
								APELLIDO_PERSONA = _APELLIDO,
                                ID_PUESTO = _ID_PUESTO,
                                TELEFONO = _TELEFONO,
                                SUELDO = _SUELDO
		WHERE ID_PERSONA = _ID_PERSONA;
        
        UPDATE TBL_MS_USUARIO SET ID_ROL = _ID_ROL,
								  IMG_USUARIO = _IMG_USUARIO,
                                  MODIFICADO_POR = MODIFICADO_POR,
                                  FECHA_MODIFICACION = NOW()
		WHERE ID_USUARIO = _ID_USUARIO; 
        
        SET MENSAJE = 'Usuario actualizado exitosamente.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*CREAR PREGUNTAS DE SEGURIDAD PARA RECUPERAR CONTRASENA*/
DELIMITER $$
CREATE PROCEDURE CREAR_MS_PREGUNTA_RECUPERACION(
	_ID_USUARIO INT(11),
	_PREGUNTA VARCHAR(100),
    _RESPUESTA VARCHAR(100),
    _CREADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_PREGUNTAS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) > 0 THEN
		SET MENSAJE = 'Este usuario ya cuenta con una pregunta de seguridad activa.';
        SET CODIGO = 0;
	ELSE
        INSERT INTO TBL_MS_PREGUNTAS_USUARIO(ID_USUARIO, PREGUNTA, RESPUESTA, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
        VALUES(_ID_USUARIO, _PREGUNTA, _RESPUESTA, NOW(), _CREADO_POR, NOW(), _CREADO_POR);
        SET MENSAJE = 'Pregunta de seguridad para recuperacion de contraseña registrada.';
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ACTUALIZAR PREGUNTAS DE SEGURIDAD PARA RECUPERAR CONTRASENA*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_MS_PREGUNTA_RECUPERACION(
	_ID_USUARIO INT(11),
	_PREGUNTA VARCHAR(100),
    _RESPUESTA VARCHAR(100),
    _MODIFICADO_POR INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
    )
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_PREGUNTAS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
		SET MENSAJE = 'Primero debes crear una pregunta y respuesta de seguridad para este usuario.';
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_MS_PREGUNTAS_USUARIO SET PREGUNTA = _PREGUNTA, RESPUESTA = _RESPUESTA, FECHA_MODIFICACION = NOW(), MODIFICADO_POR = _MODIFICADO_POR
        WHERE ID_USUARIO = _ID_USUARIO;
        SET MENSAJE = 'Pregunta de seguridad actualizada exitosamente.';
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*CAMBIO DE CONTRASEÑA INTERNO*/
DELIMITER $$
CREATE PROCEDURE MODIFICAR_CONTRASENA(
	_ID_USUARIO INT(11),
    _MODIFICADO_POR INT(11),
    _CONTRASENA VARCHAR(100),
	OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _MODIFICADO_POR AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "El usuario modificador no existe o esta inactivo.";
        SET CODIGO = 0;
	ELSEIF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
		SET MENSAJE = "El usuario que decea modificar no existe.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_MS_USUARIO SET CONTRASENA = _CONTRASENA, MODIFICADO_POR = _MODIFICADO_POR, FECHA_MODIFICACION = NOW() 
        WHERE ID_USUARIO = _ID_USUARIO;
        
        INSERT INTO TBL_MS_HIST_CONTRASENA (ID_USUARIO, CONTRASENA)
        VALUES (_ID_USUARIO, _CONTRASENA);
        SET MENSAJE = "Contraseña modificada exitosamente.";
        SET CODIGO = 1;
    END IF;
END $$
DELIMITER ;

/*RECUPERACION DE CONTRASEÑA*/
DELIMITER $$
CREATE PROCEDURE OBTENER_PREGUNTA_SEGURIDAD(_ID_USUARIO INT(11))
BEGIN
	SELECT PREGUNTA FROM TBL_MS_PREGUNTAS_USUARIO WHERE ID_USUARIO = _ID_USUARIO;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_RESPUESTA_SEGURIDAD(_ID_USUARIO INT(11))
BEGIN
	SELECT RESPUESTA FROM TBL_MS_PREGUNTAS_USUARIO WHERE ID_USUARIO = _ID_USUARIO;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE RECUPERAR_CONTRASENA(
	_ID_USUARIO INT(11),
    _CONTRASENA VARCHAR(100),
	OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
    IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
		SET MENSAJE = "El usuario que decea modificar no existe.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_MS_USUARIO SET CONTRASENA = _CONTRASENA, MODIFICADO_POR = _ID_USUARIO, FECHA_MODIFICACION = NOW() 
        WHERE ID_USUARIO = _ID_USUARIO;
        INSERT INTO TBL_MS_HIST_CONTRASENA (ID_USUARIO, CONTRASENA)
        VALUES (_ID_USUARIO, _CONTRASENA);
        SET MENSAJE = "Contraseña modificada exitosamente.";
        SET CODIGO = 1;
    END IF;
END $$
DELIMITER ;
/*CONTROL DE VENTAS*/
/*Crear y modificar clientes*/ /*modulo ventas*/
DELIMITER $$
CREATE PROCEDURE CREAR_CLIENTE(
	_NOMBRE VARCHAR(100),
    _RTN VARCHAR(16),
    _DIRECCION VARCHAR(100),
    _TELEFONO VARCHAR(9),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_CLIENTES WHERE RTN = _RTN) > 0 THEN 
		SET MENSAJE = "Ya existe un cliente con el RTN brindado.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_CLIENTES(NOMBRE_CLIENTE, RTN, DIRECCION_CLIENTE, TELEFONO_CLIENTE)
        VALUES(_NOMBRE, _RTN, _DIRECCION, _TELEFONO);
        SET MENSAJE = "Cliente registrado de forma exitosa.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ACTUALIZAR UN CLIENTE*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_CLIENTE(
	_ID_CLIENTE INT(11),
	_NOMBRE VARCHAR(100),
    _RTN VARCHAR(16),
    _DIRECCION VARCHAR(100),
    _TELEFONO VARCHAR(9),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_CLIENTES WHERE  RTN = _RTN AND ID_CLIENTE != _ID_CLIENTE) > 0 THEN 
		SET MENSAJE = "Ya existe un cliente con el RTN brindado.";
        SET CODIGO = 0;
	ELSE
		UPDATE TBL_CLIENTES SET NOMBRE_CLIENTE = _NOMBRE, RTN = _RTN, DIRECCION_CLIENTE = _DIRECCION, TELEFONO_CLIENTE = _TELEFONO
        WHERE ID_CLIENTE = _ID_CLIENTE;
        SET MENSAJE = "Cliente actualizado de forma exitosa.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*Encabezado de venta*/
DELIMITER $$
CREATE PROCEDURE CREAR_ENCABEZADO_VENTA(
	_ID_PAGO INT(11),
    _ID_USUARIO INT(11),
    _ID_CLIENTE INT(11),
    _DESCRIPCION_VENTA VARCHAR(200),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_CLIENTES WHERE ID_CLIENTE = _ID_CLIENTE) = 0 THEN
		SET MENSAJE = "El cliente referenciado no existe.";
        SET CODIGO = 0;
	ELSE 
		INSERT INTO TBL_VENTAS (ID_PAGO, ID_USUARIO, CANTIDAD_VENTA, FECHA_VENTA, ID_CLIENTE, ISV, TOTAL_VENTA, DESCRIPCION_VENTA, ESTADO, COMISION_EMPLEADO)
        VALUES(_ID_PAGO, _ID_USUARIO, 0, NOW(), _ID_CLIENTE, 0.00, 0.00, _DESCRIPCION_VENTA, 0, 0.00);
        SET MENSAJE = "Venta en proceso registrada.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*ACTUALIZAR EL ENCABEZADO DE UNA VENTA*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_ENCABEZADO_VENTA(
	_ID_VENTA INT(11),
	_ID_PAGO INT(11),
    _ID_USUARIO INT(11),
    _ID_CLIENTE INT(11),
    _DESCRIPCION_VENTA VARCHAR(200),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 1) > 0 THEN
		SET MENSAJE = "Venta inexistente o finalizada.";
        SET CODIGO = 0;
	ELSE 
		UPDATE TBL_VENTAS SET ID_PAGO = _ID_PAGO, ID_USUARIO = _ID_USUARIO, FECHA_VENTA = NOW(),
        ID_CLIENTE = _ID_CLIENTE, DESCRIPCION_VENTA = _DESCRIPCION_VENTA WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0;
        SET MENSAJE = "Información de la venta actualizada.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*AGREGAR PRODUTOS A UNA VENTA*/
DELIMITER $$
CREATE PROCEDURE AGREGAR_PRODUCTO_VENTA(
	_ID_PRODUCTO INT(11),
    _ID_VENTA INT(11),
    _CANTIDAD DECIMAL(10,2),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _CANT_LIMITE DECIMAL(10,2);
    DECLARE _PRECIO_VENTA DECIMAL(10,2);
    DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    SELECT EXISTENCIA INTO _CANT_LIMITE FROM TBL_INVENTARIO WHERE ID_PRODUCTO = _ID_PRODUCTO;
    SELECT PRECIO_VENTA INTO _PRECIO_VENTA FROM TBL_INVENTARIO WHERE ID_PRODUCTO = _ID_PRODUCTO;
    
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Venta ineccistente o finalizada";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_PRODUCTOS WHERE ID_PRODUCTO = _ID_PRODUCTO AND ESTADO = 1) = 0 THEN
		SET MENSAJE = "Producto ineccistente o inactivo";
        SET CODIGO = 0;
	ELSEIF _CANTIDAD > _CANT_LIMITE THEN
		SET MENSAJE = CONCAT("Producto no agregado, la disponibilidad del producto es de ", _CANT_LIMITE ," unidades.");
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_DETALLES_VENTA WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_VENTA = _ID_VENTA) > 0 THEN
		SET MENSAJE = "Producto ya existe en los detalles de esta venta.";
        SET CODIGO = 0;
	ELSE
		INSERT INTO TBL_DETALLES_VENTA(ID_PRODUCTO, ID_VENTA, MONTO_UNITARIO, CANTIDAD_PRODUCTO, SUB_TOTAL, TOTAL)
        VALUES(_ID_PRODUCTO, _ID_VENTA, _PRECIO_VENTA, _CANTIDAD, (_PRECIO_VENTA * _CANTIDAD), ((_PRECIO_VENTA * _CANTIDAD) + (_PRECIO_VENTA * _CANTIDAD)*_ISV));
        
        UPDATE TBL_VENTAS SET TOTAL_VENTA = TOTAL_VENTA + (_PRECIO_VENTA * _CANTIDAD), ISV = ISV + ((_PRECIO_VENTA * _CANTIDAD)*_ISV)
        WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0;
        
		SET MENSAJE = "Producto agregado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ACTUALIZACION DE PRODUCTOS DE LA VENTA*/
DELIMITER $$
CREATE PROCEDURE ACTUALIZAR_PRODUCTO_VENTA(
	_ID_PRODUCTO INT(11),
    _ID_VENTA INT(11),
    _CANTIDAD INT,
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _TOTAL_temp DECIMAL(10,2);
    DECLARE _ISV_temp DECIMAL(10,2);
    DECLARE _CANT_LIMITE DECIMAL(10,2);
    DECLARE _PRECIO_VENTA DECIMAL(10,2);
    DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    SELECT PRECIO_VENTA INTO _PRECIO_VENTA FROM TBL_INVENTARIO WHERE ID_PRODUCTO = _ID_PRODUCTO;
    SELECT EXISTENCIA INTO _CANT_LIMITE FROM TBL_INVENTARIO WHERE ID_PRODUCTO = _ID_PRODUCTO;
    
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Venta ineccistente o finalizada";
        SET CODIGO = 0;
	ELSEIF _CANTIDAD > _CANT_LIMITE THEN
		SET MENSAJE = CONCAT("Producto no actualizado, la disponibilidad del producto es de ", _CANT_LIMITE ," unidades.");
        SET CODIGO = 0;
	ELSE
		SELECT (MONTO_UNITARIO * CANTIDAD_PRODUCTO), (MONTO_UNITARIO * CANTIDAD_PRODUCTO * _ISV) INTO _TOTAL_temp, _ISV_temp FROM TBL_DETALLES_VENTA
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_VENTA = _ID_VENTA;
        
		UPDATE TBL_DETALLES_VENTA SET CANTIDAD_PRODUCTO = _CANTIDAD,  SUB_TOTAL = (_PRECIO_VENTA * _CANTIDAD), TOTAL = (_PRECIO_VENTA * _CANTIDAD) + (_PRECIO_VENTA * _CANTIDAD)*_ISV
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_VENTA = _ID_VENTA;
        
        UPDATE TBL_VENTAS SET TOTAL_VENTA = TOTAL_VENTA + (_PRECIO_VENTA * _CANTIDAD) - _TOTAL_temp
        , ISV = ISV + ((_PRECIO_VENTA * _CANTIDAD)*_ISV) - _ISV_temp
        WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0;
        
		SET MENSAJE = "Producto actualizado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ELIMINAR PRODUCTOS DE UNA VENTA*/
DELIMITER $$
CREATE PROCEDURE ELIMINAR_PRODUCTO_VENTA(
	_ID_PRODUCTO INT(11),
    _ID_VENTA INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE _PRECIO DECIMAL(10,2);
    DECLARE _CANTIDAD DECIMAL(10,2);
    DECLARE _ISV DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
    
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "Venta ineccistente o finalizada";
        SET CODIGO = 0;
	ELSE
		SELECT MONTO_UNITARIO, CANTIDAD_PRODUCTO INTO _PRECIO, _CANTIDAD FROM TBL_DETALLES_VENTA
        WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_VENTA = _ID_VENTA;
        
		DELETE FROM TBL_DETALLES_VENTA WHERE ID_PRODUCTO = _ID_PRODUCTO AND ID_VENTA = _ID_VENTA;
        
        UPDATE TBL_VENTAS SET TOTAL_VENTA = TOTAL_VENTA - (_PRECIO * _CANTIDAD), ISV = ISV - ((_PRECIO * _CANTIDAD)*_ISV)
        WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0;
        
		SET MENSAJE = "Producto eliminado.";
        SET CODIGO = 1;
	END IF;
END$$
DELIMITER ;

/*ELIMINAR UNA VENTA*/
DELIMITER $$
CREATE PROCEDURE ELIMINAR_VENTA(
	_ID_VENTA INT(11),
    _ID_USUARIO INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 1) = 1 THEN
		SET MENSAJE = "La venta fue finalizada, no puede ser eliminada.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA) = 0 THEN
		SET MENSAJE = "La venta no existe";
        SET CODIGO = 0;
	ELSE
        DELETE FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA;
        SET MENSAJE = "Venta eliminada con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*FINALIZAR UNA VENTA*/
DELIMITER $$
CREATE PROCEDURE PROCESAR_VENTA(
	_ID_VENTA INT(11),
    _ID_USUARIO INT(11),
    OUT MENSAJE VARCHAR(100),
    OUT CODIGO INT
)
BEGIN
	DECLARE ISV_temp DECIMAL(10,2);
	DECLARE TOTAL_temp DECIMAL(10,2);
    DECLARE _ISV DECIMAL(10,2);
	DECLARE _COMISION DECIMAL(10,2);
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _COMISION FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 2;
    SELECT CAST(VALOR AS DECIMAL)/100 INTO _ISV FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = 1;
        
	IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ID_VENTA = _ID_VENTA AND ESTADO = 0) = 0 THEN
		SET MENSAJE = "La venta no esta registrada o ya ha sido finalizada.";
        SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_DETALLES_VENTA WHERE ID_VENTA = _ID_VENTA) = 0 THEN
		SET MENSAJE = "La venta no cuenta con productos, no puede ser procesada.";
        SET CODIGO = 0;
	ELSE
        
       DELETE D FROM TBL_DETALLES_VENTA D INNER JOIN TBL_INVENTARIO I 
	   ON D.ID_PRODUCTO = I.ID_PRODUCTO WHERE I.EXISTENCIA < D.CANTIDAD_PRODUCTO AND D.ID_VENTA = _ID_VENTA;
       
       SELECT SUM(D.MONTO_UNITARIO * D.CANTIDAD_PRODUCTO), SUM(D.MONTO_UNITARIO * D.CANTIDAD_PRODUCTO * _ISV) INTO TOTAL_temp, ISV_temp 
        FROM TBL_DETALLES_VENTA D INNER JOIN TBL_INVENTARIO I ON D.ID_PRODUCTO = I.ID_PRODUCTO 
        WHERE I.EXISTENCIA > D.CANTIDAD_PRODUCTO AND D.ID_VENTA = _ID_VENTA;
    
        INSERT INTO TBL_KARDEX (ID_INVENTARIO, FECHA_VENCI_PRODUCTO, CANTIDAD, PRECIO_UNITARIO, TOTAL, TIPO_MOVIMIENTO, FECHA_MOVIMIENTO)
			SELECT I.ID_INVENTARIO, NULL, D.CANTIDAD_PRODUCTO, I.PRECIO_UNITARIO, (D.CANTIDAD_PRODUCTO *  I.PRECIO_UNITARIO), 1, NOW() 
			FROM TBL_DETALLES_VENTA D INNER JOIN TBL_INVENTARIO I ON D.ID_PRODUCTO = I.ID_PRODUCTO
			WHERE D.ID_VENTA = _ID_VENTA;
            
		SET SQL_SAFE_UPDATES = 0;
        UPDATE TBL_INVENTARIO I JOIN TBL_DETALLES_VENTA D ON I.ID_PRODUCTO = D.ID_PRODUCTO
			SET	I.EXISTENCIA = I.EXISTENCIA - D.CANTIDAD_PRODUCTO WHERE D.ID_VENTA = _ID_VENTA;
		SET SQL_SAFE_UPDATES = 1;
        
        UPDATE TBL_VENTAS SET ID_USUARIO = _ID_USUARIO, ESTADO = 1, FECHA_VENTA = NOW(), TOTAL_VENTA = TOTAL_temp,
        ISV = ISV_temp WHERE ID_VENTA = _ID_VENTA;
        
        UPDATE TBL_VENTAS SET COMISION_EMPLEADO = (TOTAL_VENTA)*_COMISION WHERE ID_VENTA = _ID_VENTA AND ID_USUARIO = _ID_USUARIO;
        
        SET MENSAJE = "Venta registrada con exito.";
        SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;
DELIMITER $$
CREATE PROCEDURE OBTENER_USUARIOS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_USUARIO) = 0 THEN
        SET MENSAJE = 'No existen usuarios dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT U.ID_USUARIO, U.ID_ROL, P.ID_PUESTO, U.USUARIO, U.CONTRASENA, P.NOMBRE_PERSONA, P.APELLIDO_PERSONA,
		U.CORREO_ELECTRONICO, P.TELEFONO, P.RTN, P.SUELDO, U.IMG_USUARIO, PU.PREGUNTA, PU.RESPUESTA,
        P.GENERO, U.FECHA_VENCIMIENTO, U.CREADO_POR, U.ESTADO FROM TBL_MS_USUARIO U 
        INNER JOIN TBL_PERSONAS P ON P.ID_PERSONA = U.ID_PERSONA
		INNER JOIN TBL_MS_PREGUNTAS_USUARIO PU ON U.ID_USUARIO = PU.ID_USUARIO;
		SET MENSAJE = 'Lista de usuarios retornada exitosamente';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_USUARIO(_ID_USUARIO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
        SET MENSAJE = 'El usuario no existe';
        SET CODIGO = 0;
    ELSE 
        SELECT U.ID_USUARIO, U.ID_ROL, P.ID_PUESTO, U.USUARIO, U.CONTRASENA, P.NOMBRE_PERSONA, P.APELLIDO_PERSONA,
		U.CORREO_ELECTRONICO, P.TELEFONO, P.RTN, P.SUELDO, U.IMG_USUARIO, PU.PREGUNTA, PU.RESPUESTA,
        P.GENERO, U.FECHA_VENCIMIENTO, U.CREADO_POR, U.ESTADO FROM TBL_MS_USUARIO U 
        INNER JOIN TBL_PERSONAS P ON P.ID_PERSONA = U.ID_PERSONA
		INNER JOIN TBL_MS_PREGUNTAS_USUARIO PU ON U.ID_USUARIO = PU.ID_USUARIO
        WHERE U.ID_USUARIO = _ID_USUARIO;
        SET CODIGO = 1;
        SET MENSAJE = 'El usuario ha sido encontrado';
    END IF;
END$$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE OBTENER_CLIENTES( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_CLIENTES) = 0 THEN
        SET MENSAJE = 'No existen clientes dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_CLIENTES ;
            SET MENSAJE = 'Lista de usuarios retornada exitosamente';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_CLIENTE( _ID_CLIENTE INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_CLIENTES WHERE ID_CLIENTE = _ID_CLIENTE) = 0 THEN
        SET MENSAJE = 'El cliente solicitado no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_CLIENTES  WHERE ID_CLIENTE = _ID_CLIENTE;
            SET MENSAJE = 'Usuario encontrado';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_VENTAS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_VENTAS) = 0 THEN
        SET MENSAJE = 'No hay registros de venta dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_VENTAS ;
            SET MENSAJE = 'Lista de ventas retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;


DELIMITER $$
CREATE PROCEDURE OBTENER_VENTA( _ID_VENTA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_VENTA WHERE ID_VENTA = _ID_VENTA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de la venta no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_VENTA  WHERE ID_VENTA = _ID_VENTA;
            SET MENSAJE = 'Venta encontrada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_DETALLE_VENTAS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_DETALLES_VENTA) = 0 THEN
        SET MENSAJE = 'No hay registros de detalles de venta dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_DETALLES_VENTA ;
            SET MENSAJE = 'Lista de ventas retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;


DELIMITER $$
CREATE PROCEDURE OBTENER_DETALLE_VENTA( _ID_VENTA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_DETALLES_VENTA WHERE ID_VENTA = _ID_VENTA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de los detalles de la venta no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM _ID_DETALLES_VENTA  WHERE ID_VENTA = _ID_VENTA;
            SET MENSAJE = 'Detalles de la venta encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_VENTA_COMPLETA( _ID_VENTA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM tbl_ventas INNER JOIN tbl_detalles_venta ON tbl_ventas.ID_VENTA = tbl_detalles_venta.ID_VENTA WHERE tbl_ventas.ID_VENTA = _ID_VENTA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de los detalles de la venta no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM tbl_ventas INNER JOIN tbl_detalles_venta ON tbl_ventas.ID_VENTA = tbl_detalles_venta.ID_VENTA WHERE tbl_ventas.ID_VENTA = _ID_VENTA;
            SET MENSAJE = 'Detalles de la venta encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_INVENTARIO( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_INVENTARIO) = 0 THEN
        SET MENSAJE = 'No hay registros de inventario dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_INVENTARIO ;
            SET MENSAJE = 'Lista de inventario retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_INVENTARIO_PROD( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    SELECT * FROM TBL_INVENTARIO WHERE EXISTENCIA !=0;
        SET MENSAJE = 'Lista de inventario retornada';
        SET CODIGO = 1;
END$$
DELIMITER;


DELIMITER $$
CREATE PROCEDURE OBTENER_CATEGORIAS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_CATEGORIAS) = 0 THEN
        SET MENSAJE = 'No hay registros de categorias dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_CATEGORIAS ;
            SET MENSAJE = 'Lista de categorias retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_CATEGORIA( _ID_CATEGORIA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_CATEGORIAS WHERE ID_CATEGORIA = _ID_CATEGORIA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de categoria no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM _ID_CATEGORIAS  WHERE ID_CATEGORIA = _ID_CATEGORIA;
            SET MENSAJE = 'Detalles de la venta encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_PRODUCTO( _ID_PRODUCTO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PRODUCTOS WHERE ID_PRODUCTO = _ID_PRODUCTO) = 0 THEN
        SET MENSAJE = 'El registro solicitado de producto no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_PRODUCTOS  WHERE ID_PRODUCTO = _ID_PRODUCTO;
            SET MENSAJE = 'Detalles del producto actualizados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_KARDEX( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_KARDEX) = 0 THEN
        SET MENSAJE = 'No hay registros de KARDEX dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_KARDEX ;
            SET MENSAJE = 'Lista de kardex retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_PROVEEDORES( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PROVEEDORES) = 0 THEN
        SET MENSAJE = 'No hay registros de proveedores dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_PROVEEDORES ;
            SET MENSAJE = 'Lista de proveedores retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_PROVEEDOR( _ID_PROVEEDOR INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = _ID_PROVEEDOR) = 0 THEN
        SET MENSAJE = 'El registro solicitado de proveedor no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_PROVEEDORES  WHERE ID_PROVEEDOR = _ID_PROVEEDOR;
            SET MENSAJE = 'Detalles del proveedor encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_COMPRAS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_COMPRAS) = 0 THEN
        SET MENSAJE = 'No hay registros de proveedores dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_COMPRAS ;
            SET MENSAJE = 'Lista de compras retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_COMPRA( _ID_COMPRA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_COMPRAS WHERE ID_COMPRA = _ID_COMPRA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de compra no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_COMPRAS  WHERE ID_COMPRA = _ID_COMPRA;
            SET MENSAJE = 'Detalles de la compra encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_ROLES( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_ROLES) = 0 THEN
        SET MENSAJE = 'No hay registros de roles dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_ROLES ;
            SET MENSAJE = 'Lista de roles retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_ROL( _ID_ROL INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_ROLES WHERE ID_ROL = _ID_ROL) = 0 THEN
        SET MENSAJE = 'El registro solicitado de proveedor no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_ROLES  WHERE ID_ROL = _ID_ROL;
            SET MENSAJE = 'Detalles de la compra encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_OBJETOS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_OBJETOS) = 0 THEN
        SET MENSAJE = 'No hay registros de objetos dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_OBJETOS ;
            SET MENSAJE = 'Lista de objetos retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_OBJETO( _ID_OBJETO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_OBJETOS WHERE ID_OBJETO = _ID_OBJETO) = 0 THEN
        SET MENSAJE = 'El registro solicitado de objeto no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_OBJETOS  WHERE ID_OBJETO = _ID_OBJETO;
            SET MENSAJE = 'Detalles de la objeto encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_PERMISOS(_ID_USUARIO VARCHAR(50), OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO) = 0 THEN
		SET MENSAJE = 'No existe un usuario que deceas consultar';
		SET CODIGO = 0;
	ELSEIF (SELECT COUNT(*) FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO AND ESTADO = 0) = 1 THEN
		SET MENSAJE = 'El usuario esta inactivo.';
		SET CODIGO = 0;
	ELSE 
		SELECT ID_OBJETO, ID_ROL, PERMISO_INSERCION, PERMISO_ELIMINACION, PERMISO_ACTUALIZACION, PERMISO_CONSULTAR FROM TBL_PERMISO
		WHERE ID_ROL = (SELECT ID_ROL FROM TBL_MS_USUARIO WHERE ID_USUARIO = _ID_USUARIO); 
        SET MENSAJE = 'Permisos retornados.';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PERMISOS_ROL(_ID_ROL INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
	IF(SELECT COUNT(*) FROM TBL_MS_ROLES WHERE ID_ROL = _ID_ROL) = 0 THEN
		SET MENSAJE = 'No existe el rol que deceas consultar';
		SET CODIGO = 0;
	ELSE 
		SELECT ID_OBJETO, ID_ROL, PERMISO_INSERCION, PERMISO_ELIMINACION, PERMISO_ACTUALIZACION, PERMISO_CONSULTAR FROM TBL_PERMISO
		WHERE ID_ROL = _ID_ROL; 
        SET MENSAJE = 'Permisos retornados.';
		SET CODIGO = 1;
    END IF;
END$$

DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PERMISO( _ID_PERMISO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_PERMISO WHERE ID_OBJETO = _ID_OBJETO) = 0 THEN
        SET MENSAJE = 'El registro solicitado de permiso no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_PERMISO  WHERE ID_PERMISO = _ID_PERMISO;
            SET MENSAJE = 'Detalles del permiso encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_MET_PAGO( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_METODOS_PAGO) = 0 THEN
        SET MENSAJE = 'No hay registros de metodos de pago dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_METODOS_PAGO ;
            SET MENSAJE = 'Lista de metodos de pago retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_MET_PAGO_ID( _ID_PAGO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_METODOS_PAGO WHERE ID_PAGO = _ID_PAGO) = 0 THEN
        SET MENSAJE = 'El registro solicitado de metodos de pago no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_METODOS_PAGO  WHERE ID_PAGO = _ID_PAGO;
            SET MENSAJE = 'Detalles del metodo de pago encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_PARAMETROS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_PARAMETROS) = 0 THEN
        SET MENSAJE = 'No hay registros de parametros dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_PARAMETROS ;
            SET MENSAJE = 'Lista de parametros de pago retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_PARAMETRO( _ID_PARAMETRO INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_PARAMETROS WHERE ID_PARAMETRO = _ID_PARAMETRO) = 0 THEN
        SET MENSAJE = 'El registro solicitado de parametros no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_PARAMETROS  WHERE ID_PARAMETRO = _ID_PARAMETRO;
            SET MENSAJE = 'Detalles del parametro encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_BITACORA( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_BITACORA) = 0 THEN
        SET MENSAJE = 'No hay registros de bitacora dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_BITACORA ;
            SET MENSAJE = 'Lista de bitacora de pago retornada';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER;

DELIMITER $$
CREATE PROCEDURE OBTENER_BITACORA_ID( _ID_BITACORA INT, OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MS_BITACORA WHERE ID_BITACORA = _ID_BITACORA) = 0 THEN
        SET MENSAJE = 'El registro solicitado de BITACORA no existe dentro de la base de datos';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MS_BITACORA WHERE ID_BITACORA = _ID_BITACORA;
            SET MENSAJE = 'Detalles de BITACORA encontrados';
            SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;


/*AGREGAR A LAS FUNCIONES EN EL BACKEND*/
DELIMITER $$
CREATE PROCEDURE OBTENER_COMISIONES( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ESTADO = 1) = 0 THEN
        SET MENSAJE = 'No existen ventas registradas en el sistema.';
        SET CODIGO = 0;
    ELSE
        SELECT U.ID_USUARIO, V.ID_VENTA, V.TOTAL_VENTA, V.COMISION_EMPLEADO, U.USUARIO, U.CORREO_ELECTRONICO FROM TBL_VENTAS V 
		INNER JOIN TBL_MS_USUARIO U ON V.ID_USUARIO = U.ID_USUARIO
		WHERE V.ESTADO = 1;
		SET MENSAJE = 'Comisiones encontradas';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_COMISIONES_USUARIO(_ID_USUARIO INT(11), OUT MENSAJE VARCHAR(100), OUT CODIGO INT, OUT COMISIONES_TOTAL DECIMAL)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_VENTAS WHERE ESTADO = 1 AND ID_USUARIO = _ID_USUARIO) = 0 THEN
        SET MENSAJE = 'No existen comisiones para este usuario.';
        SET CODIGO = 0;
    ELSE
        SELECT U.ID_USUARIO, V.ID_VENTA, V.TOTAL_VENTA, V.COMISION_EMPLEADO, U.USUARIO, U.CORREO_ELECTRONICO FROM TBL_VENTAS V 
		INNER JOIN TBL_MS_USUARIO U ON V.ID_USUARIO = U.ID_USUARIO
		WHERE V.ESTADO = 1 AND U.ID_USUARIO = _ID_USUARIO;
        
        SELECT SUM(COMISION_EMPLEADO) INTO COMISIONES_TOTAL FROM TBL_VENTAS V 
		INNER JOIN TBL_MS_USUARIO U ON V.ID_USUARIO = U.ID_USUARIO
		WHERE V.ESTADO = 1 AND U.ID_USUARIO = _ID_USUARIO;
		SET MENSAJE = 'Comisiones encontradas';
		SET CODIGO = 1;
    END IF;
END$$

/*OBTENER INFORMACION DE AYUDA*/
DELIMITER $$
CREATE PROCEDURE OBTENER_INFORMACION( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_INFORMACION) = 0 THEN
        SET MENSAJE = 'No existen secciones de información.';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_INFORMACION;
		SET MENSAJE = 'Información disponible';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE OBTENER_INFORMACION_ACTIVA( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_INFORMACION) = 0 THEN
        SET MENSAJE = 'No existen secciones de información.';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_INFORMACION WHERE ESTADO = 1;
		SET MENSAJE = 'Información activa';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;

/*Obtener informacion de los puesto*/
DELIMITER $$
CREATE PROCEDURE OBTENER_PUESTOS( OUT MENSAJE VARCHAR(100), OUT CODIGO INT)
BEGIN
    IF (SELECT COUNT(*) FROM TBL_MP_PUESTO) = 0 THEN
        SET MENSAJE = 'No existen puestos registrados.';
        SET CODIGO = 0;
    ELSE
        SELECT * FROM TBL_MP_PUESTO;
		SET MENSAJE = 'Información de los puesto';
		SET CODIGO = 1;
    END IF;
END$$
DELIMITER ;
DELIMITER $$
CREATE TRIGGER TR_INSERTAR_ROL
BEFORE INSERT ON TBL_MS_ROLES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.CREADO_POR, 1, 'INSERT', 'Se ha creado un nuevo rol.', NULL,
	CONCAT('Se creó el nuevo rol: ', NEW.ROL,', con descripción: ',NEW.DESCRIPCION, ', ID relacional: ', NEW.ID_ROL), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_ROL
BEFORE UPDATE ON TBL_MS_ROLES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se actualizó un rol.', CONCAT('Antiguos datos del rol: ', OLD.ROL,', con descripción: ', OLD.DESCRIPCION),
	CONCAT('Nuevos datos del rol: ', NEW.ROL,', con descripción: ',NEW.DESCRIPCION, ', ID relacional: ', NEW.ID_ROL), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_OBJETO
BEFORE INSERT ON TBL_OBJETOS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.CREADO_POR, 1, 'INSERT', 'Se ha creado un nuevo Objeto.', NULL,
	CONCAT('Se creó el nuevo objeto: ', NEW.OBJETOS,'; ',NEW.TIPO_OBJETO,', con descripción: ',NEW.DESCRIPCION, ', ID relacional: ', NEW.ID_OBJETO), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_OBJETOS
BEFORE UPDATE ON TBL_OBJETOS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se actualizó un objeto.', CONCAT('Antiguos datos del objeto: ', OLD.OBJETOS,'; ',OLD.TIPO_OBJETO,', con descripción: ', OLD.DESCRIPCION),
	CONCAT('Nuevos datos del objeto: ', NEW.OBJETOS,'; ',NEW.TIPO_OBJETO,', con descripción: ',NEW.DESCRIPCION, ', ID relacional: ', NEW.ID_OBJETO), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_PERMISOS
BEFORE INSERT ON TBL_PERMISO
FOR EACH ROW
BEGIN
	DECLARE ROL_temp VARCHAR(50);
    DECLARE OBJETO_temp VARCHAR(50);
    SELECT OBJETOS INTO OBJETO_temp FROM TBL_OBJETOS WHERE ID_OBJETO = NEW.ID_OBJETO;
    SELECT ROL INTO ROL_temp FROM TBL_MS_ROLES WHERE ID_ROL = NEW.ID_ROL;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.CREADO_POR, 1, 'INSERT', 'Se han registrado permisos para un rol.', NULL,
	CONCAT('Se insertarón permisos para el rol: ', ROL_temp,' dentro del objeto: ', OBJETO_temp ,', detalles: INSERTAR-',NEW.PERMISO_INSERCION,', ELIMINAR-', NEW.PERMISO_ELIMINACION
    ,', ACTUALIZAR-', NEW.PERMISO_ACTUALIZACION,', CONSULTAR-', NEW.PERMISO_CONSULTAR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PERMISOS
BEFORE UPDATE ON TBL_PERMISO
FOR EACH ROW
BEGIN
	DECLARE ROL_temp VARCHAR(50);
    DECLARE OBJETO_temp VARCHAR(50);
    SELECT OBJETOS INTO OBJETO_temp FROM TBL_OBJETOS WHERE ID_OBJETO = NEW.ID_OBJETO;
    SELECT ROL INTO ROL_temp FROM TBL_MS_ROLES WHERE ID_ROL = NEW.ID_ROL;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se han actualizado permisos para un rol.', NULL,
	CONCAT('Se actualozarón permisos para el rol: ', ROL_temp,' dentro del objeto: ', OBJETO_temp ,', detalles: INSERTAR-',NEW.PERMISO_INSERCION,', ELIMINAR-', NEW.PERMISO_ELIMINACION
    ,', ACTUALIZAR-', NEW.PERMISO_ACTUALIZACION,', CONSULTAR-', NEW.PERMISO_CONSULTAR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_METODO_PAGO
BEFORE INSERT ON TBL_METODOS_PAGO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se han registrado un nuevo método de pago.', NULL,
	CONCAT('Se creó un método de pago: ', NEW.FORMA_PAGO,', descripción: ', NEW.DESCRIPCION), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_METODO_PAGO
BEFORE UPDATE ON TBL_METODOS_PAGO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'UPDATE', 'Se actualizó un método de pago.', CONCAT('Información anterior: ', OLD.FORMA_PAGO,', descripción: ', OLD.DESCRIPCION),
	CONCAT('Se actualizó con la información: ', NEW.FORMA_PAGO,', descripción: ', NEW.DESCRIPCION), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_MS_PARAMETRO
BEFORE INSERT ON TBL_MS_PARAMETROS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.ID_USUARIO, 1, 'INSERT', 'Se ha creado un nuevo parametro.', NULL,
	CONCAT('Se creó el parametro: ', NEW.PARAMETRO,', valor registrado: ', NEW.VALOR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PARAMETRO
BEFORE UPDATE ON TBL_MS_PARAMETROS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Se actualizó un parametro.', CONCAT('Información anterior: ', OLD.PARAMETRO,', valor: ', OLD.VALOR),
	CONCAT('Se actualizó con la información: ', NEW.PARAMETRO,', nuevo valor: ', NEW.VALOR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_CREAR_PUESTO
BEFORE INSERT ON TBL_MP_PUESTO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'CREATE', 'Se creó un nuevo puesto.', null,
	CONCAT('Se creó un nuevo puesto de trabajo: ', NEW.PUESTO,', nuevo valor: ', NEW.DESCRIPCION_PUESTO), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PUESTO
BEFORE UPDATE ON TBL_MP_PUESTO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'UPDATE', 'Se actualizó un puesto.', CONCAT('Datos anteriores: ', OLD.PUESTO,', nuevo valor: ', OLD.DESCRIPCION_PUESTO),
	CONCAT('Se actualizó el puesto de trabajo: ', NEW.PUESTO,', nuevo valor: ', NEW.DESCRIPCION_PUESTO), NOW());
END$$
DELIMITER $$
CREATE TRIGGER TR_INSERTAR_PROVEEDOR
BEFORE INSERT ON TBL_PROVEEDORES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se ha registrado un nuevo proveedor.', NULL,
	CONCAT('Se creó un nuevo proveedor con los datos: ',NEW.NOMBRE_PROVEEDOR,'; RTN: ',NEW.RTN,', CONTACTO: ', NEW.TELEFONO_PROVEEDOR,', ',NEW.CORREO_PROVEEDOR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PROVEEDOR
BEFORE UPDATE ON TBL_PROVEEDORES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'UPDATE', 'Se ha actualizado un proveedor.', CONCAT('Infromación anterior: ',OLD.NOMBRE_PROVEEDOR,'; RTN: ',OLD.RTN,', CONTACTO: ', OLD.TELEFONO_PROVEEDOR,', ',OLD.CORREO_PROVEEDOR),
	CONCAT('Se actualizó la información del proveedor: ',NEW.NOMBRE_PROVEEDOR,'; RTN: ',NEW.RTN,', CONTACTO: ', NEW.TELEFONO_PROVEEDOR,', ',NEW.CORREO_PROVEEDOR), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_COMPRA
BEFORE INSERT ON TBL_COMPRAS
FOR EACH ROW
BEGIN
	DECLARE PROVEEDOR_temp VARCHAR(50);
    DECLARE PAGO_temp VARCHAR(50);
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = NEW.ID_PROVEEDOR;
    SELECT FORMA_PAGO INTO PAGO_temp FROM TBL_METODOS_PAGO WHERE ID_PAGO = NEW.ID_PAGO;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.ID_USUARIO, 1, 'INSERT', 'Se ha comenzado el proceso de una nueva compra.', NULL,
	CONCAT('Se creó un encabezado de compra con el proveedor: ',PROVEEDOR_temp,'; TOTAL: ',NEW.TOTAL_COMPRA,', ISV: ', NEW.ISV_COMPRA,', PAGO: ',PAGO_temp,' Descripción: ',NEW.OBSERVACION_COMPRA), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_COMPRA
BEFORE UPDATE ON TBL_COMPRAS
FOR EACH ROW
BEGIN
	DECLARE PAGO_temp_act VARCHAR(50);
    DECLARE PAGO_temp_old VARCHAR(50);
	DECLARE PROVEEDOR_temp VARCHAR(50);
    SELECT FORMA_PAGO INTO PAGO_temp_act FROM TBL_METODOS_PAGO WHERE ID_PAGO = NEW.ID_PAGO;
    SELECT FORMA_PAGO INTO PAGO_temp_old FROM TBL_METODOS_PAGO WHERE ID_PAGO = OLD.ID_PAGO;
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = NEW.ID_PROVEEDOR;
    
    IF NEW.ID_PAGO != OLD.ID_PAGO THEN 
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Se ha modificado la forma de pago de una compra.', CONCAT('Método de pago anterior: ', PAGO_temp_old),
		CONCAT('La compra con ID: ',NEW.ID_COMPRA,', actualizo la forma de pago a: ',PAGO_temp_act), NOW());
    END IF;
    
    IF NEW.ESTADO = 1 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Finalización de compra.', NULL,
		CONCAT('Se concreto la compra con el proveedor: ',PROVEEDOR_temp,'; TOTAL: ',NEW.TOTAL_COMPRA,', ISV: ', NEW.ISV_COMPRA,', PAGO: ',PAGO_temp_act,' Descripción: ',NEW.OBSERVACION_COMPRA), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_ELIMINAR_COMPRA
AFTER DELETE ON TBL_COMPRAS
FOR EACH ROW
BEGIN
	DECLARE PROVEEDOR_temp VARCHAR(50);
    DECLARE PAGO_temp VARCHAR(50);
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = OLD.ID_PROVEEDOR;
    SELECT FORMA_PAGO INTO PAGO_temp FROM TBL_METODOS_PAGO WHERE ID_PAGO = OLD.ID_PAGO;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(OLD.ID_USUARIO, 1, 'DELETE', 'Se eliminado una compra.', CONCAT('Se eliminó la compra con el proveedor: ',PROVEEDOR_temp,'; TOTAL: ',OLD.TOTAL_COMPRA,', ISV: ', OLD.ISV_COMPRA,', PAGO: ',PAGO_temp,', Descripción: ',OLD.OBSERVACION_COMPRA),
	CONCAT('Se eliminó la compra y los articulos relacionados a esta.'), NOW());
END$$
/*TRIGGERS DE INVENTARIO, KARDEX Y PRODUCTOS*/
DELIMITER $$
CREATE TRIGGER TR_INSERTAR_CATEGORIA
BEFORE INSERT ON TBL_CATEGORIAS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se creo una nueva categoría de productos.', NULL,
	CONCAT('Se creó la categoría de productos: ',NEW.CATEGORIA,' con la descripción: ', NEW.DESCRIPCION), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_CATEGORIA
BEFORE UPDATE ON TBL_CATEGORIAS
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'UPDATE', 'Se creo una nueva categoría de productos.',	CONCAT('Valor anterior ',NEW.CATEGORIA,' con la descripción: ', NEW.DESCRIPCION),
	CONCAT('Se actualizó la categoría de productos a ',NEW.CATEGORIA,' con la descripción: ', NEW.DESCRIPCION), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_PRODUCTO
BEFORE INSERT ON TBL_PRODUCTOS
FOR EACH ROW
BEGIN
	DECLARE PROVEEDOR_temp VARCHAR(50);
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = NEW.ID_PROVEEDOR;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se ingreso un nuevo producto al catálogo.', NULL,
	CONCAT('Se agrego el producto: ',NEW.NOMBRE_PRODUCTO,', ',NEW.MARCA_PRODUCTO,', del proveedor: ',PROVEEDOR_temp,' con la descripción: ', NEW.DESCRIPCION_PRODUCTO), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PRODUCTO
BEFORE UPDATE ON TBL_PRODUCTOS
FOR EACH ROW
BEGIN
	DECLARE PROVEEDOR_temp_act VARCHAR(50);
    DECLARE PROVEEDOR_temp_old VARCHAR(50);
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp_act FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = NEW.ID_PROVEEDOR;
    SELECT NOMBRE_PROVEEDOR INTO PROVEEDOR_temp_old FROM TBL_PROVEEDORES WHERE ID_PROVEEDOR = OLD.ID_PROVEEDOR;
    
    IF NEW.ESTADO != OLD.ESTADO AND NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se actualizó el estado del producto', NULL,
		CONCAT('El producto: ',NEW.NOMBRE_PRODUCTO,'; ',NEW.MARCA_PRODUCTO,', del proveedor: ',PROVEEDOR_temp_act,' cambio su estado a disponible.'), NOW());
    END IF;
    
	IF NEW.ESTADO != OLD.ESTADO AND NOT NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se actualizó el estado del producto', NULL,
		CONCAT('El producto: ',NEW.NOMBRE_PRODUCTO,'; ',NEW.MARCA_PRODUCTO,', del proveedor: ',PROVEEDOR_temp_act,' fue deshabilitado.'), NOW());
    END IF;
    
    IF (NEW.ESTADO != OLD.ESTADO) OR (NEW.ESTADO = OLD.ESTADO) THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se actualizo un producto del catálogo.', CONCAT('Información anterior: ',OLD.NOMBRE_PRODUCTO,', ',OLD.MARCA_PRODUCTO,', del proveedor: ',PROVEEDOR_temp_old,' con la descripción: ', OLD.DESCRIPCION_PRODUCTO),
		CONCAT('Se actualizó a: ',NEW.NOMBRE_PRODUCTO,', ',NEW.MARCA_PRODUCTO,', del proveedor: ',PROVEEDOR_temp_act,' con la descripción: ', NEW.DESCRIPCION_PRODUCTO), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_INVENTARIO
BEFORE INSERT ON TBL_INVENTARIO
FOR EACH ROW
BEGIN
	DECLARE PRODUCTO_temp VARCHAR(50);
    SELECT NOMBRE_PRODUCTO INTO PRODUCTO_temp FROM TBL_PRODUCTOS WHERE ID_PRODUCTO = NEW.ID_PRODUCTO;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se creo una sección de inventario para un nuevo producto.', NULL,
	CONCAT('Se agrego al inventario el producto: ',PRODUCTO_temp,', ID:',NEW.ID_PRODUCTO,', con valor y existencia de: ',NEW.PRECIO_VENTA,'; ', NEW.EXISTENCIA), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_INVENTARIO
BEFORE UPDATE ON TBL_INVENTARIO
FOR EACH ROW
BEGIN
	DECLARE PRODUCTO_temp VARCHAR(50);
    SELECT NOMBRE_PRODUCTO INTO PRODUCTO_temp FROM TBL_PRODUCTOS WHERE ID_PRODUCTO = NEW.ID_PRODUCTO;
    
    IF NEW.ESTADO != OLD.ESTADO AND NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se cambió el estado del producto en inventario.', NULL,
		CONCAT('El producto: ',PRODUCTO_temp,', ID: ',NEW.ID_PRODUCTO,', cambió su estado a habilitado'), NOW());
    END IF;
    
    IF NEW.ESTADO != OLD.ESTADO AND NOT NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se cambió el estado del producto en inventario.', NULL,
		CONCAT('El producto: ',PRODUCTO_temp,', ID: ',NEW.ID_PRODUCTO,', cambió su estado a deshabilitado'), NOW());
    END IF;
    
    IF NEW.PRECIO_VENTA != OLD.PRECIO_VENTA THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se cambió el precio de venta del producto en inventario.', CONCAT('Precio anterior: ', OLD.PRECIO_VENTA),
		CONCAT('El producto: ',PRODUCTO_temp,', ID: ',NEW.ID_PRODUCTO,', cambió su precio de venta a ', NEW.PRECIO_VENTA), NOW());
    END IF;
    
    IF NEW.PRECIO_UNITARIO != OLD.PRECIO_UNITARIO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se cambió el precio unitario del producto en inventario.', CONCAT('Precio promedio ponderado anterior: ', OLD.PRECIO_UNITARIO),
		CONCAT('El producto: ',PRODUCTO_temp,', ID: ',NEW.ID_PRODUCTO,', cambió su precio promedio ponderado a ', NEW.PRECIO_UNITARIO), NOW());
    END IF;
    
    IF NEW.EXISTENCIA != OLD.EXISTENCIA THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se registro un movimiento en la existencia de un producto.', CONCAT('Cantidad anterior: ', OLD.EXISTENCIA),
		CONCAT('El producto: ',PRODUCTO_temp,', ID: ',NEW.ID_PRODUCTO,', cambió su existencia a ', NEW.EXISTENCIA), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_KARDEX
BEFORE INSERT ON TBL_KARDEX
FOR EACH ROW
BEGIN
	DECLARE PRODUCTO_temp VARCHAR(50);
    SELECT NOMBRE_PRODUCTO INTO PRODUCTO_temp FROM TBL_PRODUCTOS P 
    INNER JOIN TBL_INVENTARIO I ON I.ID_PRODUCTO = P.ID_PRODUCTO 
    WHERE I.ID_INVENTARIO = NEW.ID_INVENTARIO;
    
    IF NEW.TIPO_MOVIMIENTO = 0 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'INSERT', 'Se registro una compra de productos.', NULL,
		CONCAT('Se agrego un kardex para la tarjeta de inventario: ',NEW.ID_INVENTARIO,', del producto: ',PRODUCTO_temp,', con los sigientes datos cantidad, precio unitario, total: ',NEW.CANTIDAD,', ', NEW.PRECIO_UNITARIO,', ',NEW.TOTAL), NOW());
	ELSEIF NEW.TIPO_MOVIMIENTO = 1 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'INSERT', 'Se registro una venta de productos.', NULL,
		CONCAT('Se agrego un kardex para la tarjeta de inventario: ', NEW.ID_INVENTARIO,', del producto: ', PRODUCTO_temp,', con los sigientes datos cantidad, precio unitario, total: ',NEW.CANTIDAD,', ', NEW.PRECIO_UNITARIO,', ',NEW.TOTAL), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_KARDEX
BEFORE UPDATE ON TBL_KARDEX
FOR EACH ROW
BEGIN
	DECLARE PRODUCTO_temp VARCHAR(50);
    SELECT NOMBRE_PRODUCTO INTO PRODUCTO_temp FROM TBL_PRODUCTOS P 
    INNER JOIN TBL_INVENTARIO I ON I.ID_PRODUCTO = P.ID_PRODUCTO 
    WHERE I.ID_INVENTARIO = NEW.ID_INVENTARIO;
    
    IF NEW.TIPO_MOVIMIENTO = 0 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se actualizó la fecha de vencimiento de un producto.', NULL,
		CONCAT('Se actualizó la fecha de vencimiento del inventario: ',NEW.ID_INVENTARIO,', del producto: ',PRODUCTO_temp,', dichos productos de vencen en: ',NEW.FECHA_VENCI_PRODUCTO), NOW());
	END IF;
END$$
/*TRIGGERS DE PERSONA HE USUARIO*/
DELIMITER $$
CREATE TRIGGER TR_INSERTAR_PERSONA
BEFORE INSERT ON TBL_PERSONAS
FOR EACH ROW
BEGIN
	DECLARE PUESTO_temp VARCHAR(50);
	SELECT PUESTO INTO PUESTO_temp FROM TBL_MP_PUESTO WHERE ID_PUESTO = NEW.ID_PUESTO;
        
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se ha registrado el ingreso de una nueva persona.', NULL,
	CONCAT('INFORMACION:',NEW.NOMBRE_PERSONA,' ',NEW.APELLIDO_PERSONA,'; ', NEW.RTN,', CONTACTO: ', NEW.TELEFONO,', PUESTO: ',PUESTO_temp,'; ', NEW.SUELDO), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PERSONA
BEFORE UPDATE ON TBL_PERSONAS
FOR EACH ROW
BEGIN
	DECLARE PUESTO_temp_act VARCHAR(50);
    DECLARE PUESTO_temp_old VARCHAR(50);
	SELECT PUESTO INTO PUESTO_temp_act FROM TBL_MP_PUESTO WHERE ID_PUESTO = NEW.ID_PUESTO;
	SELECT PUESTO INTO PUESTO_temp_old FROM TBL_MP_PUESTO WHERE ID_PUESTO = OLD.ID_PUESTO;  
    
    IF NEW.ID_PUESTO != OLD.ID_PUESTO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se ha actualizado el puesto de una persona.',
		CONCAT('Puesto anterior', PUESTO_temp_old,'; Salario: ', OLD.SUELDO),
		CONCAT('La persona', NEW.NOMBRE_PERSONA,' ', NEW.APELLIDO_PERSONA,' con RTN ',NEW.RTN,', fue actualizada al puesto de ', PUESTO_temp_act,'; Salario: ', NEW.SUELDO), NOW());
	END IF;
    
    IF (NEW.NOMBRE_PERSONA != OLD.NOMBRE_PERSONA) OR (NEW.APELLIDO_PERSONA != OLD.APELLIDO_PERSONA) OR (NEW.TELEFONO != OLD.TELEFONO)  THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(1, 1, 'UPDATE', 'Se ha actualizado la información de una persona.',
		CONCAT('INFORMACION:', OLD.NOMBRE_PERSONA,' ', OLD.APELLIDO_PERSONA,', CONTACTO: ', OLD.TELEFONO),
		CONCAT('INFORMACION:', NEW.NOMBRE_PERSONA,' ', NEW.APELLIDO_PERSONA,', CONTACTO: ', NEW.TELEFONO), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_USUARIO
BEFORE INSERT ON TBL_MS_USUARIO
FOR EACH ROW
BEGIN
	DECLARE ROL_temp VARCHAR(50);
	SELECT ROL INTO ROL_temp FROM TBL_MS_ROLES WHERE ID_ROL = NEW.ID_ROL;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.CREADO_POR, 1, 'INSERT', 'Creación de un usuario.', NULL,
	CONCAT('INFORMACION:', NEW.USUARIO,'; ',NEW.CORREO_ELECTRONICO,'; ROL: ', ROL_temp, '; REFERENCIA A PERSONA: ',NEW.ID_PERSONA), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_USUARIO
BEFORE UPDATE ON TBL_MS_USUARIO
FOR EACH ROW
BEGIN
	DECLARE ROL_temp_act VARCHAR(50);
    DECLARE ROL_temp_old VARCHAR(50);
	SELECT ROL INTO ROL_temp_act FROM TBL_MS_ROLES WHERE ID_ROL = NEW.ID_ROL;
    SELECT ROL INTO ROL_temp_old FROM TBL_MS_ROLES WHERE ID_ROL = OLD.ID_ROL;
    
    IF NEW.CONTRASENA != OLD.CONTRASENA THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se ha actualizado la contraseña.', NULL,
		CONCAT('El usuario: ', NEW.USUARIO,' actualizo su contraseña la cual fue encriptada por seguridad'), NOW());
	END IF;
    
	IF NEW.ESTADO != OLD.ESTADO AND NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se ha actualizado el estado.', NULL,
		CONCAT('El usuario: ', NEW.USUARIO,' fue dado de alta en el sistema.'), NOW());
	END IF;
    
	IF NEW.ESTADO != OLD.ESTADO AND NOT NEW.ESTADO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se ha actualizado el estado.', NULL,
		CONCAT('El usuario: ', NEW.USUARIO,' fue dado de baja en el sistema.'), NOW());
	END IF;
    
    IF NEW.ID_ROL != OLD.ID_ROL THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se ha actualizado el rol del usuario.', CONCAT('Rol anterior: ', ROL_temp_old),
		CONCAT('El nuevo rol del usuario', NEW.USUARIO,' es ', ROL_temp_act), NOW());
	END IF;
    
	IF NEW.IMG_USUARIO != OLD.IMG_USUARIO THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se ha actualizado imagen del usuario.', NULL,
		CONCAT('El usuario', NEW.USUARIO,' ha actualizado su imagen de perfil URL: ', NEW.IMG_USUARIO), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_MS_HIST_CONTRASENA
BEFORE INSERT ON TBL_MS_HIST_CONTRASENA
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.ID_USUARIO, 1, 'INSERT', 'Registro de contraseña.', NULL,
	CONCAT('INFORMACION: El usuario', NEW.ID_USUARIO,' ha registrado una nueva contraseña en el sistema.'), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_CREAR_PREGUNTA_SEGURIDAD
BEFORE INSERT ON TBL_MS_PREGUNTAS_USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.CREADO_POR, 1, 'INSERT', 'Se agrego una forma de recuperación de contraseña', NULL,
	CONCAT('INFORMACION: El usuario ', NEW.ID_USUARIO,' ha registrado una pregunta y respuesta de seguridad: ', NEW.PREGUNTA ,', con respuesta encriptada por seguridad.'), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_PREGUNTA_SEGURIDAD
BEFORE UPDATE ON TBL_MS_PREGUNTAS_USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.MODIFICADO_POR, 1, 'UPDATE', 'Se actualizo la pregunta o respuesta de seguridad.', NULL,
	CONCAT('INFORMACION: El usuario', NEW.ID_USUARIO,' ha actualizadO la pregunta o respuesta de seguridad: ', NEW.PREGUNTA ,', con respuesta encriptada por seguridad.'), NOW());
END$$
DELIMITER $$
CREATE TRIGGER TR_INSERTAR_CLIENTE
BEFORE INSERT ON TBL_CLIENTES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'INSERT', 'Se ha registrado un nuevo cliente.', NULL,
	CONCAT('Se creó un nuevo cliente con los datos: ',NEW.NOMBRE_CLIENTE,'; RTN: ',NEW.RTN,', CONTACTO: ', NEW.TELEFONO_CLIENTE,', ',NEW.DIRECCION_CLIENTE), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_CLIENTE
BEFORE UPDATE ON TBL_CLIENTES
FOR EACH ROW
BEGIN
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(1, 1, 'UPDATE', 'Se ha actualizado un cliente.', CONCAT('Infromación anterior: ',OLD.NOMBRE_CLIENTE,'; RTN: ',OLD.RTN,', CONTACTO: ', OLD.TELEFONO_CLIENTE,', ',OLD.DIRECCION_CLIENTE),
	CONCAT('Se actualizó la información del cliente: ',NEW.NOMBRE_CLIENTE,'; RTN: ',NEW.RTN,', CONTACTO: ', NEW.TELEFONO_CLIENTE,', ',NEW.DIRECCION_CLIENTE), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_INSERTAR_VENTA
BEFORE INSERT ON TBL_VENTAS
FOR EACH ROW
BEGIN
	DECLARE CLIENTE_temp VARCHAR(50);
    DECLARE PAGO_temp VARCHAR(50);
    SELECT NOMBRE_CLIENTE INTO CLIENTE_temp FROM TBL_CLIENTES WHERE ID_CLIENTE = NEW.ID_CLIENTE;
    SELECT FORMA_PAGO INTO PAGO_temp FROM TBL_METODOS_PAGO WHERE ID_PAGO = NEW.ID_PAGO;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(NEW.ID_USUARIO, 1, 'INSERT', 'Se ha comenzado el proceso de una nueva venta.', NULL,
	CONCAT('Se creó un encabezado de venta con el cliente: ',CLIENTE_temp,'; ID: ',NEW.ID_CLIENTE,', TOTAL: ',NEW.TOTAL_VENTA,', ISV: ', NEW.ISV,', PAGO: ',PAGO_temp,' Descripción: ',NEW.DESCRIPCION_VENTA), NOW());
END$$

DELIMITER $$
CREATE TRIGGER TR_ACTUALIZAR_VENTA
BEFORE UPDATE ON TBL_VENTAS
FOR EACH ROW
BEGIN
	DECLARE PAGO_temp_act VARCHAR(50);
    DECLARE PAGO_temp_old VARCHAR(50);
	DECLARE CLIENTE_temp_act VARCHAR(50);
    DECLARE CLIENTE_temp_old VARCHAR(50);
    SELECT FORMA_PAGO INTO PAGO_temp_act FROM TBL_METODOS_PAGO WHERE ID_PAGO = NEW.ID_PAGO;
    SELECT FORMA_PAGO INTO PAGO_temp_old FROM TBL_METODOS_PAGO WHERE ID_PAGO = OLD.ID_PAGO;
    SELECT NOMBRE_CLIENTE INTO CLIENTE_temp_act FROM TBL_CLIENTES WHERE ID_CLIENTE = NEW.ID_CLIENTE;
    SELECT NOMBRE_CLIENTE INTO CLIENTE_temp_old FROM TBL_CLIENTES WHERE ID_CLIENTE = OLD.ID_CLIENTE;
    
    IF NEW.ID_PAGO != OLD.ID_PAGO THEN 
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Se ha modificado la forma de pago de una venta.', CONCAT('Método de pago anterior: ', PAGO_temp_old),
		CONCAT('La venta con ID: ',NEW.ID_VENTA,', actualizo la forma de pago a: ',PAGO_temp_act), NOW());
    END IF;
    
    IF NEW.ESTADO = 1 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Finalización de venta.', NULL,
		CONCAT('Se concreto la venta con el cliente: ',CLIENTE_temp_act,'; ID: ',NEW.ID_CLIENTE,', TOTAL: ',NEW.TOTAL_VENTA,', ISV: ', NEW.ISV,', PAGO: ',PAGO_temp_act,' Descripción: ',NEW.DESCRIPCION_VENTA), NOW());
        
        INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Comisión por ventas.', NULL,
		CONCAT('Se asignó una comisión al usuario con ID: ',NEW.ID_USUARIO,', Comisión: ',NEW.COMISION_EMPLEADO,', por cencepto de la venta número: ',OLD.ID_VENTA), NOW());
    END IF;
    
    IF NEW.ESTADO = 0 THEN
		INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
		VALUES(NEW.ID_USUARIO, 1, 'UPDATE', 'Se actualizó la información de la venta.', CONCAT('Información anterior: ', CLIENTE_temp_old,'; ID: ',OLD.ID_CLIENTE,', TOTAL: ',OLD.TOTAL_VENTA,', ISV: ', OLD.ISV,', PAGO: ',PAGO_temp_old,', Descripción: ',OLD.DESCRIPCION_VENTA),
		CONCAT('Se concreto la venta con el cliente: ',CLIENTE_temp_act,'; ID: ',NEW.ID_CLIENTE,', TOTAL: ',NEW.TOTAL_VENTA,', ISV: ', NEW.ISV,', PAGO: ',PAGO_temp_act,', Descripción: ',NEW.DESCRIPCION_VENTA), NOW());
    END IF;
END$$

DELIMITER $$
CREATE TRIGGER TR_ELIMINAR_VENTA
AFTER DELETE ON TBL_VENTAS
FOR EACH ROW
BEGIN
	DECLARE CLIENTE_temp VARCHAR(50);
    DECLARE PAGO_temp VARCHAR(50);
    SELECT NOMBRE_CLIENTE INTO CLIENTE_temp FROM TBL_CLIENTES WHERE ID_CLIENTE = OLD.ID_CLIENTE;
    SELECT FORMA_PAGO INTO PAGO_temp FROM TBL_METODOS_PAGO WHERE ID_PAGO = OLD.ID_PAGO;
    
	INSERT INTO TBL_MS_BITACORA(ID_USUARIO, ID_OBJETO, ACCION, DESCRIPCION, INFORMACION_ANTERIOR, INFORMACION_ACTUAL, FECHA_BITACORA)
	VALUES(OLD.ID_USUARIO, 1, 'DELETE', 'Se eliminado una venta.', CONCAT('Se eliminó la venta con el cliente: ',CLIENTE_temp,'; TOTAL: ',OLD.TOTAL_VENTA,', ISV: ', OLD.ISV,', PAGO: ',PAGO_temp,', Descripción: ',OLD.DESCRIPCION_VENTA),
	CONCAT('Se eliminó la venta y los articulos relacionados a esta.'), NOW());
END$$
INSERT INTO TBL_CATEGORIAS(CATEGORIA, DESCRIPCION)
VALUES	('Bombillos', 'variedad de focos y lamparas'),
		('Cables', 'Cables de variedad THWN y simples'),
        ('Hogar','Variedad de tomas, piñas y protectores');

INSERT INTO TBL_CLIENTES(NOMBRE_CLIENTE, RTN, DIRECCION_CLIENTE, TELEFONO_CLIENTE)
VALUES  ('Juan Perez', '08017847756123', 'Col. Palmira', '9984-5741'),
		('Maria Teresa', '08017843656473', 'Col. Mira montes', '9984-5742'),
        ('Jose Monguia', '08017845619741', 'Col. Kennedy', '9984-5743'),
        ('Fabricio Hernandez', '0801741456123', 'Col. Palmira', '9984-5744'),
        ('Kenneth Avila', '08017123650123', 'Col. Cerro Grande', '9984-5745'),
        ('Ester Lopez', '08017845677485', 'Barrio la Hoya', '9984-5746');
        
INSERT INTO TBL_METODOS_PAGO(FORMA_PAGO, DESCRIPCION)
VALUES	('Efectivo', 'Pago unitario'),
		('Credito', 'control de pagos segun acuerdo'),
        ('Tarjeta de credito', 'Visa o MasterCard');
	
INSERT INTO TBL_MP_PUESTO(PUESTO, DESCRIPCION_PUESTO)
VALUES  ('Gerente general', 'Gerente general de tienda'),
		('Ejecutivo de ventas', 'Encargado de concretar las ventas y cotizaciones con los clientes'),
        ('Ejecutivo de compra', 'Analizis de las mejores ofertas de productos y compras del mismo'),
        ('Encargado de bodega', 'Control general de la entrada y salida de material'),
        ('Atención al cliente', 'Encargado de resolver dudas y reclamos de los clientes'),
        ('Mantenimiento', 'Personal de reparación, aseo y vigilancia.');
        
INSERT INTO TBL_OBJETOS(OBJETOS, TIPO_OBJETO, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUES	('Administracion', 'Administración', 'Ninguna', NOW(), 1, NOW(), 1),
		('Compras', 'Gestion', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Ventas', 'Gestion', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Inventario', 'Control', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Seguridad', 'Administración', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Ayuda', 'Informativo', 'Ninguna', NOW(), 1, NOW(), 1);
        
INSERT INTO TBL_MS_ROLES(ROL, DESCRIPCION, FECHA_CREACION, CREADO_POR, FECHA_MODIFICACION, MODIFICADO_POR)
VALUES	('Admin', 'Ninguna', NOW(), 1, NOW(), 1),
		('Analista de compras', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Cajero', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Gerente de inventario', 'Ninguna', NOW(), 1, NOW(), 1),
        ('Control de productos', 'Ninguna', NOW(), 1, NOW(), 1);
        
INSERT INTO TBL_PROVEEDORES(RTN, NOMBRE_PROVEEDOR, TELEFONO_PROVEEDOR, CORREO_PROVEEDOR)
VALUES	('0102147484451', 'LUMEX', '9915-2020', 'lumex@correo.com'),
		('0102147478964', 'START', '9915-2021', 'start@correo.com'),
        ('0102174441578', 'LINEAS', '9915-2022', 'lineas@correo.com'),
        ('0801114578513', 'MATER', '9915-2020', 'mater@correo.com'),
        ('0102777458711', 'SERVLUX', '9915-2020', 'servlux@correo.com');

DELIMITER $$
CALL CREAR_PERMISOS( 1, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PERMISOS( 2, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PERMISOS( 3, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PERMISOS( 4, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PERMISOS( 5, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PERMISOS( 6, 1, TRUE, TRUE, TRUE, TRUE, 1, @MENSAJE, @CODIGO);
CALL CREAR_PRODUCTO(1, 'Foco 1', 'LUX', 'bajas potencias para zonas amplias',' img.jpg', 1, 1, @MENSAJE, @CODIGO);
CALL CREAR_PRODUCTO(2, 'Foco 2', 'TERX', 'Luz de interiores',' img.jpg', 1, 1, @MENSAJE, @CODIGO);
CALL CREAR_PRODUCTO(3, 'Foco 3', 'ILUMINA', 'Ideal para exteriores',' img.jpg', 1, 1, @MENSAJE, @CODIGO);
CALL CREAR_PRODUCTO(2, 'Foco 4', 'SUR', 'compuesto',' img.jpg', 1, 1, @MENSAJE, @CODIGO);
CALL CREAR_PRODUCTO(1, 'Foco 5', 'CLEND', 'Sin detalles',' img.jpg', 1, 1, @MENSAJE, @CODIGO);
CALL ENCABEZADO_COMPRA(1, 1, 1, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL ENCABEZADO_COMPRA(1, 1, 1, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL ENCABEZADO_COMPRA(1, 1, 2, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL ENCABEZADO_COMPRA(1, 1, 3, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL ENCABEZADO_COMPRA(1, 1, 3, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL ENCABEZADO_COMPRA(1, 1, 2, 'NINGUNA', @MENSAJE, @CODIGO, @ID);
CALL AGREGAR_PRODUCTO_COMPRA(1, 1, 19.23, 'NINGUNA', 80, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(2, 1, 16.23, 'NINGUNA', 46, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(3, 1, 13.40, 'NINGUNA', 10, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(4, 1, 16.00, 'NINGUNA', 15, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(2, 2, 14.36, 'NINGUNA', 10, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(3, 3, 21.65, 'NINGUNA', 45, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(4, 4, 12.54, 'NINGUNA', 50, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_COMPRA(5, 5, 15.00, 'NINGUNA', 30, @MENSAJE, @CODIGO);
CALL PROCESAR_COMPRA(1, 1, @MENSAJE, @CODIGO);
CALL PROCESAR_COMPRA(2, 1, @MENSAJE, @CODIGO);
CALL MODIFICAR_INVENTARIO(1, 28.50, 1, @MENSAJE, @CODIGO);
CALL MODIFICAR_INVENTARIO(2, 26.25, 1, @MENSAJE, @CODIGO);
CALL MODIFICAR_INVENTARIO(3, 24.30, 1, @MENSAJE, @CODIGO);
CALL MODIFICAR_INVENTARIO(4, 23.40, 1, @MENSAJE, @CODIGO);
CALL MODIFICAR_INVENTARIO(5, 29.50, 1, @MENSAJE, @CODIGO);
CALL CREAR_ENCABEZADO_VENTA(1, 1, 2, 'NINGUNA', @MENSAJE, @CODIGO);
CALL CREAR_ENCABEZADO_VENTA(2, 1, 1, 'NINGUNA', @MENSAJE, @CODIGO);
CALL CREAR_ENCABEZADO_VENTA(3, 1, 3, 'NINGUNA', @MENSAJE, @CODIGO);
CALL CREAR_ENCABEZADO_VENTA(2, 1, 6, 'NINGUNA', @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(1, 1, 1, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(2, 1, 1, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(3, 1, 1, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(1, 2, 1, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(3, 3, 1, @MENSAJE, @CODIGO);
CALL AGREGAR_PRODUCTO_VENTA(4, 4, 1, @MENSAJE, @CODIGO);
CALL PROCESAR_VENTA(1, 1, @MENSAJE, @CODIGO);
CALL PROCESAR_VENTA(2, 1, @MENSAJE, @CODIGO);
$$